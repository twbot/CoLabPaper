This file is a merged representation of the entire frontend codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-12-05T02:34:43.509Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
src/
  app/
    api/
      v1/
        auth/
          callback/
            social/
              route.ts
            route.ts
          confirm/
            route.ts
          social/
            google/
              route.ts
        cls/
          [projectId]/
            [filename]/
              route.ts
            route.ts
        compile/
          route.ts
        profile/
          route.ts
        projects/
          [projectId]/
            shares/
              route.ts
            route.ts
          route.ts
        temp-profile/
          route.ts
        upload-image/
          [projectId]/
            route.ts
    dashboard/
      page.tsx
    project/
      [projectId]/
        layout.tsx
        page.tsx
    signin/
      client.tsx
      page.tsx
    signup/
      client.tsx
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    Dashboard/
      Navbar/
        Navbar.tsx
        NavbarButton.tsx
      CreateProjectDialog.tsx
      DashboardDrawerContainer.tsx
      DashboardDrawerLink.tsx
      LayoutDashboard.tsx
      ProjectDrawer.tsx
    Editor/
      CreateFileDialog.tsx
      EditorNavbar.tsx
      EditorWrapper.tsx
      FileNameInput.tsx
      PDFViewer.tsx
    Forms/
      EmailAuthForm.tsx
      EmailSignUpForm.tsx
    Icons/
      index.tsx
      SVG.tsx
    Marketing/
      splash-page.tsx
    ui/
      button/
        google-auth.tsx
        index.tsx
        submit.tsx
      alert.tsx
      dialog.tsx
      dropdown-menu.tsx
      form.tsx
      input.tsx
      label.tsx
      resizable.tsx
      search.tsx
      separator.tsx
      table.tsx
      tabs.tsx
      toast.tsx
      toaster.tsx
      use-toast.ts
  config/
    upload.ts
  shared/
    actions/
      auth.ts
    constants/
      index.ts
      latex.constants.ts
      login.constants.ts
    context/
      ProjectContext.tsx
      ThemeContext.tsx
    hooks/
      useImageUpload.ts
      useLatexCompiler.ts
    types/
      api/
        index.ts
        temp-profile.type.ts
      database.types.ts
      form.type.ts
      index.ts
      latex.type.ts
      table.types.ts
    utility/
      supabase/
        client.ts
        middleware.ts
        server.ts
      styleHelpers.ts
supabase/
  migrations/
    20241203172526_initial_schema.sql
    20241203172558_add_indexes.sql
    20241203172617_enable_rls.sql
    20241204195230_update_project_owner_fkey.sql
    20241204195623_update_project_shares_fkey.sql
  templates/
    confirmation.html
  .gitignore
  config.toml
.env.example
.eslintrc.json
.gitignore
components.json
dump.sql
middleware.ts
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: src/app/api/v1/auth/callback/social/route.ts
================
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'
import { type CookieOptions, createServerClient } from '@supabase/ssr'
import { createClient } from '@/utils/supabase/server'

export async function GET(request: Request) {
    const { searchParams, origin } = new URL(request.url)
    const code = searchParams.get('code')
    // if "next" is in param, use it as the redirect URL
    const next = searchParams.get('next') ?? '/'

    if (code) {
        const supabase = await createClient()

        const { data: { user }, error } = await supabase.auth.exchangeCodeForSession(code)
        if (user && !error) {
            // Check if the user has a profile set up
            const { data: profileData, error: profileError } = await supabase
                .from('profile')
                .select('*')
                .eq('id', user?.id)
                .single()

            if (!profileData) {
                const profileImageUrl = user.user_metadata.avatar_url
                const email = user.user_metadata.email
                const username = email.split('@')[0]
                const fullName = user.user_metadata.full_name
                const firstName = fullName.split(' ')[0]
                const lastName = fullName.split(' ')[1]
                try {
                    const { data, error } = await supabase
                        .from('profile')
                        .insert({
                            id: user.id,
                            email: email,
                            profile_image: profileImageUrl,
                            username: username,
                            first_name: firstName,
                            last_name: lastName
                        })

                    if (error) {
                        console.error('Error inserting profile:', error)
                    } else {
                        console.log(`User profile with id ${user.id} created through Google SSO.`)
                    }
                } catch (error) {
                    console.error('Error inserting profile:', error)
                }
            }

            if (profileError || !profileData) {
                // If the user doesn't have a profile, redirect to the profile-setup page
                // return NextResponse.redirect(`${origin}/profile-setup`)
                return NextResponse.redirect(`${origin}`)
            }

            // If the user has a profile, redirect to the "next" URL or the default route
            return NextResponse.redirect(`${origin}${next}`)
        }
    }

    // return the user to an error page with instructions
    return NextResponse.redirect(`${origin}/auth/auth-code-error`)
}

================
File: src/app/api/v1/auth/callback/route.ts
================
import { createClient } from "@/utils/supabase/server"
import { NextResponse } from "next/server"

export async function GET(request: Request) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')

  console.log('Received code:', code) // Debug log

  if (code) {
    try {
      const supabase = await createClient()
      console.log('Attempting to exchange code for session...') // Debug log

      // Exchange the code for a session
      const { data, error } = await supabase.auth.verifyOtp({
        token_hash: code,
        type: 'signup'
      })

      if (error) {
        console.error('Verification error:', error) // Debug log
        return NextResponse.redirect(`${requestUrl.origin}/signup?error=${error.message}`)
      }

      if (data) {
        console.log('Verification successful:', data) // Debug log

        // Get user from the newly created session
        const { data: { user } } = await supabase.auth.getUser()

        if (user) {
          // Check if profile exists
          const { data: existingProfile } = await supabase
            .from('profile')
            .select('*')
            .eq('id', user.id)
            .single()

          if (!existingProfile) {
            // Get temp profile data
            const { data: tempProfile } = await supabase
              .from('temp_profile')
              .select('*')
              .eq('user_id', user.id)
              .single()

            if (tempProfile) {
              // Create the permanent profile
              const { error: profileError } = await supabase
                .from('profile')
                .insert({
                  id: user.id,
                  email: tempProfile.email,
                  username: tempProfile.username,
                  first_name: tempProfile.first_name,
                  last_name: tempProfile.last_name
                })

              if (profileError) {
                console.error('Profile creation error:', profileError)
              } else {
                // Delete the temp profile
                await supabase
                  .from('temp_profile')
                  .delete()
                  .eq('user_id', user.id)
              }
            }
          }

          console.log('Redirecting to dashboard...') // Debug log
          return NextResponse.redirect(`${requestUrl.origin}/dashboard`)
        }
      }
    } catch (error) {
      console.error('Error in verification process:', error)
      return NextResponse.redirect(`${requestUrl.origin}/signup?error=verification_failed`)
    }
  }

  // If we get here, something went wrong
  console.log('No code provided or verification failed') // Debug log
  return NextResponse.redirect(`${requestUrl.origin}/signup?error=invalid_request`)
}

================
File: src/app/api/v1/auth/confirm/route.ts
================
import { type EmailOtpType } from '@supabase/supabase-js'
import { NextResponse, type NextRequest } from 'next/server'

import { createClient } from '@/utils/supabase/server'
import { redirect } from 'next/navigation'

export async function GET(request: NextRequest) {
    const { searchParams, origin } = new URL(request.url)
    const token_hash = searchParams.get('token_hash')
    const type = searchParams.get('type') as EmailOtpType | null
    const next = searchParams.get('next') ?? '/'

    if (token_hash && type) {
        try {
            const supabase = await createClient()

            const { data, error } = await supabase.auth.verifyOtp({
                type,
                token_hash,
            })

            if (error) {
                console.error('Verification error:', error) // Debug log
                return NextResponse.redirect(`${origin}/signup?error=${error.message}`)
            }

            if (data) {
                // Get user from the newly created session
                const { data: { user } } = await supabase.auth.getUser()

                //TODO: Fix signup data transfer from temp_profile to profile table
                if (user) {
                    // Check if profile exists
                    const { data: existingProfile } = await supabase
                        .from('profile')
                        .select('*')
                        .eq('id', user.id)
                        .single()

                    if (!existingProfile) {
                        // Get temp profile data
                        const { data: tempProfile } = await supabase
                            .from('temp_profile')
                            .select('*')
                            .eq('user_id', user.id)
                            .single()

                        if (tempProfile) {
                            // Create the permanent profile
                            const { error: profileError } = await supabase
                                .from('profile')
                                .insert({
                                    id: user.id,
                                    email: tempProfile.email,
                                    username: tempProfile.username,
                                    first_name: tempProfile.first_name,
                                    last_name: tempProfile.last_name
                                })

                            if (profileError) {
                                console.error('Profile creation error:', profileError)
                            } else {
                                // Delete the temp profile
                                await supabase
                                    .from('temp_profile')
                                    .delete()
                                    .eq('user_id', user.id)
                            }
                        }
                    }

                    console.log('Redirecting to dashboard...') // Debug log
                    return NextResponse.redirect(`${origin}/dashboard`)
                }
            }
        } catch (error) {
            console.error('Error in verification process:', error)
            return NextResponse.redirect(`${origin}/signup?error=verification_failed`)
        }
    }

    // If we get here, something went wrong
    console.log('No code provided or verification failed') // Debug log
    return NextResponse.redirect(`${origin}/signup?error=invalid_request`)
}

================
File: src/app/api/v1/auth/social/google/route.ts
================
import { createClient } from '@/supabase/server'
import { getURL } from '@/utils/fetchHelpers'
import { headers } from "next/headers"

export async function POST(request: Request) {
    const origin = headers().get("origin")
    const supabase = createClient()

    const { user, data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
            redirectTo: `${getURL()}api/${process.env.NEXT_PUBLIC_API_VERSION}/auth/callback/social`
        }
    })

    if (error) {
        console.error(error)
        return new Response(JSON.stringify({ error: 'Error signing in with Google' }), {
            status: 500,
        })
    }

    if (data?.url) {
        return new Response(JSON.stringify({ url: data.url }), {
            status: 200,
        })
    }

    return new Response(JSON.stringify({ error: 'No redirect URL found' }), {
        status: 500,
    })
}

================
File: src/app/api/v1/cls/[projectId]/[filename]/route.ts
================
import { NextRequest, NextResponse } from 'next/server';

const LATEX_SERVICE_URL = process.env.LATEX_SERVICE_URL || 'http://localhost:8000';

export async function DELETE(
    request: NextRequest,
    { params }: { params: { projectId: string; filename: string } }
) {
    try {
        const response = await fetch(
            `${LATEX_SERVICE_URL}/cls/${params.projectId}/${params.filename}`,
            {
                method: 'DELETE',
            }
        );

        if (!response.ok) {
            const error = await response.json();
            return NextResponse.json(
                { error: error.detail || 'Failed to delete class file' },
                { status: response.status }
            );
        }

        const result = await response.json();
        return NextResponse.json(result);
    } catch (error) {
        console.error('Class file deletion error:', error);
        return NextResponse.json(
            { error: error instanceof Error ? error.message : 'Failed to delete class file' },
            { status: 500 }
        );
    }
}

================
File: src/app/api/v1/cls/[projectId]/route.ts
================
import { NextRequest, NextResponse } from 'next/server';

const LATEX_SERVICE_URL = process.env.LATEX_SERVICE_URL || 'http://localhost:8000';

export async function POST(
    request: NextRequest,
    { params }: { params: { projectId: string } }
) {
    try {
        const formData = await request.formData();
        const filename = formData.get('filename') as string;

        // Forward the request to the LaTeX service
        const response = await fetch(
            `${LATEX_SERVICE_URL}/cls/${params.projectId}`,
            {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Filename': filename,  // Pass filename in header if needed by backend
                }
            }
        );

        if (!response.ok) {
            const error = await response.json();
            return NextResponse.json(
                { error: error.detail || 'Failed to create class file' },
                { status: response.status }
            );
        }

        const result = await response.json();
        return NextResponse.json(result);
    } catch (error) {
        console.error('Class file creation error:', error);
        return NextResponse.json(
            { error: error instanceof Error ? error.message : 'Failed to create class file' },
            { status: 500 }
        );
    }
}

export async function GET(
    request: NextRequest,
    { params }: { params: { projectId: string } }
) {
    try {
        const response = await fetch(
            `${LATEX_SERVICE_URL}/cls/${params.projectId}`,
            {
                method: 'GET',
            }
        );

        if (!response.ok) {
            const error = await response.json();
            return NextResponse.json(
                { error: error.detail || 'Failed to get project class files' },
                { status: response.status }
            );
        }

        const result = await response.json();
        return NextResponse.json(result);
    } catch (error) {
        console.error('Class file fetch error:', error);
        return NextResponse.json(
            { error: error instanceof Error ? error.message : 'Failed to get class files' },
            { status: 500 }
        );
    }
}

================
File: src/app/api/v1/compile/route.ts
================
import { NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const LATEX_SERVICE_URL = process.env.LATEX_SERVICE_URL || 'http://localhost:8000'
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY!

// const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)

export async function POST(request: Request) {
    try {
        const body = await request.json()
        const { texContent, projectId, filename } = body
        console.log(LATEX_SERVICE_URL)
        // Call LaTeX service
        const response = await fetch(`${LATEX_SERVICE_URL}/compile`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                tex_content: texContent,
                project_id: projectId,
                output_filename: filename,
            }),
        })

        if (!response.ok) {
            const error = await response.json()
            throw new Error(error.detail || 'LaTeX compilation failed')
        }

        const result = await response.json()

        // If using local storage in development, we need to adjust the URL
        if (result.storage_type === 'local') {
            // Convert the file system path to a local URL
            const localPath = result.file_path.replace('storage/', '')
            result.url = `${LATEX_SERVICE_URL}/storage/${localPath}`
        }

        return NextResponse.json(result)
    } catch (error) {
        console.error('LaTeX compilation error:', error)
        return NextResponse.json(
            { error: error instanceof Error ? error.message : 'Unknown error occurred' },
            { status: 500 }
        )
    }
}

================
File: src/app/api/v1/profile/route.ts
================
// src/app/api/v1/profile/route.ts
import { createClient } from '@/utils/supabase/server'
import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient()

    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: profile, error } = await supabase
      .from('profile')
      .select('*')
      .eq('id', user.id)
      .single()

    if (error) throw error

    return NextResponse.json({ data: profile })

  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function PUT(request: NextRequest) {
  try {
    const supabase = await createClient()
    const body = await request.json()

    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { username, first_name, last_name } = body

    // Validate username length
    if (username && username.length >= 30) {
      return NextResponse.json(
        { error: 'Username must be less than 30 characters' },
        { status: 400 }
      )
    }

    const { data: profile, error } = await supabase
      .from('profile')
      .update({
        username,
        first_name,
        last_name
      })
      .eq('id', user.id)
      .select()
      .single()

    if (error) throw error

    return NextResponse.json({ data: profile })

  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status: 500 }
    )
  }
}

================
File: src/app/api/v1/projects/[projectId]/shares/route.ts
================
// src/app/api/v1/projects/[projectId]/shares/route.ts
import { createClient } from '@/utils/supabase/server'
import { NextRequest, NextResponse } from 'next/server'

export async function GET(
    request: NextRequest,
    { params }: { params: { projectId: string } }
) {
    try {
        const supabase = await createClient()

        const { data: { user }, error: authError } = await supabase.auth.getUser()
        if (authError || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const { data: shares, error } = await supabase
            .from('project_shares')
            .select(`
                *,
                user:user_id(
                    email,
                    profile!inner(username, first_name, last_name)
                )
            `)
            .eq('project_id', params.projectId)

        if (error) throw error

        return NextResponse.json({ data: shares })

    } catch (error) {
        console.error('Error:', error)
        return NextResponse.json(
            { error: error instanceof Error ? error.message : 'Internal server error' },
            { status: 500 }
        )
    }
}

export async function POST(
    request: NextRequest,
    { params }: { params: { projectId: string } }
) {
    try {
        const supabase = await createClient()
        const body = await request.json()

        const { data: { user }, error: authError } = await supabase.auth.getUser()
        if (authError || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const { email, permission_level } = body

        if (!email || !permission_level) {
            return NextResponse.json(
                { error: 'Email and permission level are required' },
                { status: 400 }
            )
        }

        if (!['read', 'write', 'admin'].includes(permission_level)) {
            return NextResponse.json(
                { error: 'Invalid permission level' },
                { status: 400 }
            )
        }

        const { data: userToShare } = await supabase
            .from('profile')
            .select('id')
            .eq('email', email)
            .single()

        if (!userToShare) {
            return NextResponse.json(
                { error: 'User not found' },
                { status: 404 }
            )
        }

        const { data: share, error } = await supabase
            .from('project_shares')
            .insert({
                project_id: params.projectId,
                user_id: userToShare.id,
                permission_level,
                shared_by: user.id
            })
            .select(`
                *,
                user:user_id(
                    email,
                    profile!inner(username, first_name, last_name)
                )
            `)
            .single()

        if (error) throw error

        return NextResponse.json({ data: share })

    } catch (error) {
        console.error('Error:', error)
        return NextResponse.json(
            { error: error instanceof Error ? error.message : 'Internal server error' },
            { status: 500 }
        )
    }
}

================
File: src/app/api/v1/projects/[projectId]/route.ts
================
import { createClient } from '@/utils/supabase/server'
import { NextRequest, NextResponse } from 'next/server'

export async function GET(
  request: NextRequest,
  { params }: { params: { projectId: string } }
) {
  try {
    const supabase = await createClient()

    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // First get the project with owner details
    const { data: project, error } = await supabase
      .from('project')
      .select(`
        *,
        owner:profile!project_owner_id_fkey(
          username,
          first_name,
          last_name,
          email
        ),
        shares:project_shares(
          user_id,
          permission_level,
          shared_at,
          shared_by,
          user:profile!project_shares_user_id_fkey(
            username,
            first_name,
            last_name,
            email
          )
        )
      `)
      .eq('id', params.projectId)
      .single()

    if (error) throw error

    return NextResponse.json({ data: project })

  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { projectId: string } }
) {
  try {
    const supabase = await createClient()
    const body = await request.json()

    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { name, status } = body

    if (!name && !status) {
      return NextResponse.json(
        { error: 'Nothing to update' },
        { status: 400 }
      )
    }

    const updates: any = {
      updated_at: new Date().toISOString()
    }

    if (name) updates.name = name.trim()
    if (status) {
      if (!['active', 'archived'].includes(status)) {
        return NextResponse.json(
          { error: 'Invalid status' },
          { status: 400 }
        )
      }
      updates.status = status
      if (status === 'archived') {
        updates.archived_at = new Date().toISOString()
        updates.archived_by = user.id
      }
    }

    const { data: project, error } = await supabase
      .from('project')
      .update(updates)
      .eq('id', params.projectId)
      .select(`
                *,
                owner:owner_id(
                    email,
                    profile!inner(username, first_name, last_name)
                ),
                shares:project_shares(
                    user_id,
                    permission_level,
                    shared_at,
                    shared_by,
                    user:user_id(
                        email,
                        profile!inner(username, first_name, last_name)
                    )
                )
            `)
      .single()

    if (error) throw error

    return NextResponse.json({ data: project })

  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { projectId: string } }
) {
  try {
    const supabase = await createClient()

    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { error } = await supabase
      .from('project')
      .delete()
      .eq('id', params.projectId)
      .eq('owner_id', user.id)

    if (error) throw error

    return NextResponse.json({ success: true })

  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status: 500 }
    )
  }
}

================
File: src/app/api/v1/projects/route.ts
================
// src/app/api/v1/projects/route.ts
import { createClient } from '@/utils/supabase/server'
import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
    try {
        const { searchParams } = new URL(request.url)
        const supabase = await createClient()

        const { data: { user }, error: authError } = await supabase.auth.getUser()
        if (authError || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const status = searchParams.get('status') || 'active'
        const page = parseInt(searchParams.get('page') || '1')
        const limit = Math.min(parseInt(searchParams.get('limit') || '10'), 50)
        const orderBy = searchParams.get('orderBy') || 'updated_at'
        const orderDirection = searchParams.get('orderDirection') || 'desc'

        // Get the projects with owner details
        const { data: projects, error, count } = await supabase
            .from('project')
            .select(`
          *,
          owner:profile!project_owner_id_fkey(
            username,
            first_name,
            last_name,
            email
          ),
          shares:project_shares(
            user_id,
            permission_level,
            shared_at,
            shared_by
          )
        `, { count: 'exact' })
            .eq('status', status)
            .order(orderBy, { ascending: orderDirection === 'asc' })
            .range((page - 1) * limit, page * limit)

        if (error) throw error

        return NextResponse.json({
            data: projects,
            pagination: {
                page,
                limit,
                total: count || 0,
                pages: count ? Math.ceil(count / limit) : 0
            }
        })

    } catch (error) {
        console.error('Error:', error)
        return NextResponse.json(
            { error: error instanceof Error ? error.message : 'Internal server error' },
            { status: 500 }
        )
    }
}

export async function POST(request: NextRequest) {
    try {
        const supabase = await createClient()
        const body = await request.json()

        const { data: { user }, error: authError } = await supabase.auth.getUser()
        console.log(user)
        if (authError || !user) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
        }

        const { name } = body

        if (!name?.trim()) {
            return NextResponse.json(
                { error: 'Project name is required' },
                { status: 400 }
            )
        }

        // Create the project
        const { data: project, error: projectError } = await supabase
            .from('project')
            .insert({
                name: name.trim(),
                owner_id: user.id,
                status: 'active'
            })
            .select('*')
            .single()

        if (projectError) throw projectError

        // Get the owner's profile
        const { data: ownerProfile } = await supabase
            .from('profile')
            .select('id, username, first_name, last_name, email')
            .eq('id', user.id)
            .single()

        // Return combined data
        return NextResponse.json({
            data: {
                ...project,
                owner_profile: ownerProfile
            }
        })

    } catch (error) {
        console.error('Error:', error)
        return NextResponse.json(
            { error: error instanceof Error ? error.message : 'Internal server error' },
            { status: 500 }
        )
    }
}

================
File: src/app/api/v1/temp-profile/route.ts
================
import { createClient } from "@/supabase/server"
import { NextRequest, NextResponse } from "next/server"
import { z } from "zod"
import { Profile, TempProfile } from "@/types/database.types"
import { ProfilePOSTSchema } from "@/types/api/profile.types"
import { TABLE } from "@/constants/database"
import { TempProfilePOSTSchema } from "@/types/api/temp-profile.types"

export async function GET(request: NextRequest) {
  const supabase = createClient()

  try {

    const { data: { user } } = await supabase.auth.getUser()

    // Get the temp_profile data
    const { data, error } = await supabase
      .from(TABLE.TEMP_PROFILE)
      .select('*')
      .eq('user_id', user.id)
      .single()

    if (error) {
      console.error('Error fetching user profile:', error)
      throw error
    }

   // Validate the data against the TempProfile schema
   const validatedData = TempProfile.parse(data)

   // Return the validated temp_profile data as the API response
   return NextResponse.json({ data: validatedData }, { status: 200 })
  } catch (error) {
    // Handle any other errors that occurred during the API request
    console.error('Error in API route:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  const supabase = createClient()

  try {

    // Parse the request body
    const body = await request.json()

    // Validate the request body against the ProfileSetupFormSchema
    const { user_id, first_name, last_name, username, email } = TempProfilePOSTSchema.parse(body)
    
    // Insert the temp_profile data into the 'temp_profile' table and select the inserted row
    const { data, error } = await supabase
      .from(TABLE.TEMP_PROFILE)
      .insert([{ user_id, first_name, last_name, username, email }])
      .select()
      .single()

    if (error) {
      // Handle any errors that occurred during the insertion
      console.error("Error inserting temp_profile:", error)
      return NextResponse.json({ error: "Failed to insert temp_profile" }, { status: 500 })
    }

    // Return the inserted temp_profile data as the API response
    return NextResponse.json({ profile: data }, { status: 201 })
  } catch (error) {
    // Handle any validation errors
    if (error instanceof z.ZodError) {
        // Type the error as z.ZodError before accessing its issues property
        const zodError: z.ZodError = error
        return NextResponse.json({ error: zodError.issues }, { status: 400 })
      }

    // Handle any other errors that occurred during the API request
    console.error("Error in API route:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

export async function DELETE(request: NextRequest) {
  const supabase = createClient()

  try {
    const { data: { user } } = await supabase.auth.getUser()

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data, error: deleteError } = await supabase
      .from(TABLE.TEMP_PROFILE)
      .delete()
      .eq('user_id', user.id)

    if (deleteError) {
      console.error('Error deleting temp profile:', deleteError)
      return NextResponse.json({ error: 'Failed to delete temp profile' }, { status: 500 })
    }

    return NextResponse.json({ message: 'Temp profile deleted successfully' }, { status: 200 })
  } catch (error) {
    console.error('Error in delete temp profile process:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

================
File: src/app/api/v1/upload-image/[projectId]/route.ts
================
// src/app/api/upload-image/[projectId]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { UPLOAD_CONFIG, isAllowedFileType } from '@/config/upload';

const LATEX_SERVICE_URL = process.env.LATEX_SERVICE_URL || 'http://localhost:8000';

export async function POST(
    request: NextRequest,
    { params }: { params: { projectId: string } }
) {
    try {
        // Validate project ID
        if (!params.projectId) {
            return NextResponse.json(
                { error: 'Project ID is required' },
                { status: 400 }
            );
        }

        // Get form data
        const formData = await request.formData();
        const file = formData.get('file') as File | null;

        // Validate file existence
        if (!file) {
            return NextResponse.json(
                { error: 'No file provided' },
                { status: 400 }
            );
        }

        // Validate file type
        if (!isAllowedFileType(file.type, UPLOAD_CONFIG.ALLOWED_FILE_TYPES)) {
            return NextResponse.json(
                {
                    error: 'Invalid file type. Allowed types: JPEG, PNG, GIF, WebP, PDF',
                    allowedTypes: UPLOAD_CONFIG.ALLOWED_FILE_TYPES
                },
                { status: 400 }
            );
        }

        // Validate file size
        if (file.size > UPLOAD_CONFIG.MAX_FILE_SIZE) {
            return NextResponse.json(
                {
                    error: 'File too large',
                    maxSize: `${UPLOAD_CONFIG.MAX_FILE_SIZE / (1024 * 1024)}MB`,
                    receivedSize: `${(file.size / (1024 * 1024)).toFixed(2)}MB`
                },
                { status: 400 }
            );
        }

        // Create a new FormData instance for the LaTeX service
        const serviceFormData = new FormData();
        serviceFormData.append('file', file);

        // Forward to LaTeX service
        const response = await fetch(
            `${LATEX_SERVICE_URL}/upload-image/${params.projectId}`,
            {
                method: 'POST',
                body: serviceFormData,
            }
        );

        if (!response.ok) {
            const errorData = await response.json();
            return NextResponse.json(
                { error: errorData.detail || 'Service error' },
                { status: response.status }
            );
        }

        const result = await response.json();

        // Return successful response
        return NextResponse.json({
            status: 'success',
            file_path: result.file_path,
            url: result.url,
            file_type: file.type,
            size: file.size,
        });

    } catch (error) {
        console.error('Image upload error:', error);

        return NextResponse.json(
            {
                error: 'Internal server error',
                detail: error instanceof Error ? error.message : 'Unknown error occurred'
            },
            { status: 500 }
        );
    }
}

export async function GET() {
    return NextResponse.json({
        maxFileSize: UPLOAD_CONFIG.MAX_FILE_SIZE,
        allowedTypes: UPLOAD_CONFIG.ALLOWED_FILE_TYPES,
        maxFileSizeMB: UPLOAD_CONFIG.MAX_FILE_SIZE_MB
    });
}

================
File: src/app/dashboard/page.tsx
================
"use client"

import { useEffect, useState } from 'react';
import DashboardDrawerContainer from '@/components/Dashboard/DashboardDrawerContainer';
import Navbar from '@/components/Dashboard/Navbar/Navbar';
import CreateProjectDialog from '@/components/Dashboard/CreateProjectDialog';
import { Button } from '@/components/ui/button';
import { Plus, Search } from 'lucide-react';
import { Input } from "@/components/ui/input";
import ProjectDrawer from '@/components/Dashboard/ProjectDrawer';
import { createClient } from '@/utils/supabase/client';

export default function Dashboard() {
    const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
    const [searchQuery, setSearchQuery] = useState('');

    useEffect(() => {
        const getUser = async () => {
            const supabase = await createClient()
            const { data: { user } } = await supabase.auth.getUser()
            console.log(user)
        }
        getUser()
    }, [])

    return (
        <div className="min-h-screen bg-background">
            {/* Navbar */}
            <Navbar />

            {/* Main Content */}
            <div className="container mx-auto p-4 space-y-6">
                {/* Header Section */}
                <div className="flex items-center justify-between">
                    <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
                    <Button onClick={() => setIsCreateDialogOpen(true)}>
                        <Plus className="w-4 h-4 mr-2" />
                        New Project
                    </Button>
                </div>

                {/* Search */}
                <div className="w-full max-w-sm">
                    <div className="relative">
                        <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                        <Input
                            placeholder="Search projects..."
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                            className="pl-8"
                        />
                    </div>
                </div>

                {/* Project Content */}
                <div className="rounded-lg bg-card">
                    <DashboardDrawerContainer
                        allProjectsComponent={<ProjectDrawer drawerName='All Projects' searchFilter={searchQuery} />}
                        myProjectsComponent={<ProjectDrawer drawerName='My Projects' searchFilter={searchQuery} />}
                        sharedProjectsComponent={<ProjectDrawer drawerName='Shared Projects' searchFilter={searchQuery} />}
                        archivedProjectsComponent={<ProjectDrawer drawerName='Archived Projects' searchFilter={searchQuery} />}
                    />
                </div>
            </div>

            <CreateProjectDialog
                isOpen={isCreateDialogOpen}
                onOpenChange={setIsCreateDialogOpen}
            />
        </div>
    );
}

================
File: src/app/project/[projectId]/layout.tsx
================
'use client';

import { ProjectProvider } from '@/context/ProjectContext';
import EditorNavbar from '@/components/Editor/EditorNavbar';

interface ProjectLayoutProps {
    children: React.ReactNode;
    params: { projectId: string };
}

export default function ProjectLayout({ children, params }: ProjectLayoutProps) {
    return (
        <ProjectProvider projectId={params.projectId}>
            <div className="flex flex-col min-h-screen h-screen bg-background">
                <EditorNavbar />
                <main className="flex-grow overflow-auto">
                    <div className="w-full h-full">
                        {children}
                    </div>
                </main>
            </div>
        </ProjectProvider>
    );
}

================
File: src/app/project/[projectId]/page.tsx
================
// src/components/Project.tsx
'use client';

import React, { useState, useCallback, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from "@/components/ui/resizable";
import { Button } from "@/components/ui/button/index";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useToast } from "@/components/ui/use-toast";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
    Loader2,
    Upload,
    Plus,
    Save,
    Trash2,
    FolderOpen,
    File,
    ChevronRight,
    ChevronDown,
    FileText,
    Image as ImageIcon
} from "lucide-react";
import { useImageUpload } from '@/hooks/useImageUpload';
import CreateFileDialog from '@/components/Editor/CreateFileDialog';
import { FileTypeKey } from '@/types';
import { LATEX_FILE_TYPES } from '@/constants/latex.constants';

// Dynamically import components
const PDFViewer = dynamic(() => import('@/components/Editor/PDFViewer'), { ssr: false });
const MonacoEditor = dynamic(() => import('@/components/Editor/EditorWrapper'), {
    ssr: false,
    loading: () => <p>Loading editor...</p>
});

interface FileItem {
    name: string;
    path: string;
    url?: string;
    type: FileTypeKey | 'image' | 'pdf';
    size: number;
    content?: string;
    uploadedAt: string;
}

export interface FolderStructure {
    [key: string]: {
        files: FileItem[];
        isOpen: boolean;
    };
}

const Project: React.FC = () => {
    // State Management
    const [latexContent, setLatexContent] = useState<string>('');
    const [pdfUrl, setPdfUrl] = useState<string>('');
    const [isCompiling, setIsCompiling] = useState<boolean>(false);
    const [activeTab, setActiveTab] = useState<string>('editor');
    const [folders, setFolders] = useState<FolderStructure>({
        '/': {
            files: [], // Main tex and bib files
            isOpen: true
        },
        '/assets': {
            files: [], // Images
            isOpen: true
        },
        '/classes': {
            files: [], // cls, sty, bst, dtx, ins files
            isOpen: true
        }
    });
    const [selectedFile, setSelectedFile] = useState<FileItem | null>(null);
    const [newFileName, setNewFileName] = useState<string>('');
    const [newFileType, setNewFileType] = useState<'tex' | 'cls'>('tex');
    const [fileContent, setFileContent] = useState<string>('');
    const { toast } = useToast();
    const [isDialogOpen, setIsDialogOpen] = useState(false);

    // Initialize image upload hook
    const {
        uploadImage,
        isUploading,
        error: uploadError,
        uploadedImages,
    } = useImageUpload({
        projectId: 'default-project',
        onUploadSuccess: (image) => {
            const newFile: FileItem = {
                name: image.file_path.split('/').pop() || 'Unnamed',
                path: `/assets/${image.file_path.split('/').pop()}`,
                url: image.url,
                type: 'image',
                size: image.size,
                uploadedAt: new Date().toISOString(),
            };

            setFolders(prev => ({
                ...prev,
                '/assets': {
                    ...prev['/assets'],
                    files: [...prev['/assets'].files, newFile]
                }
            }));

            // Insert image reference into editor if in editor mode
            if (activeTab === 'editor') {
                const imageLatex = `\\includegraphics{${image.file_path}}\n`;
                setLatexContent(prev => prev + imageLatex);
            }

            toast({
                title: "Image uploaded successfully",
                description: `File: ${newFile.name}`,
            });
        },
    });

    // Fetch all files and organize them
    const fetchAllFiles = async () => {
        try {
            // Fetch all file types
            // TODO: UNCOMMENT AND UPDATE THIS WITH PROJECTID ONCE BACKEND SETUP
            // const [clsResponse, otherFiles] = await Promise.all([
            //     fetch(`/api/cls/${projectId}`),
            //     // Add other file type fetches here
            // ]);

            // const clsData = await clsResponse.json();

            setFolders(prev => ({
                '/': {
                    files: prev['/'].files.filter(f => ['tex', 'bib'].includes(f.type)),
                    isOpen: true
                },
                '/assets': {
                    files: uploadedImages.map(img => ({
                        name: img.file_path.split('/').pop() || 'Unnamed',
                        path: `/assets/${img.file_path.split('/').pop()}`,
                        url: img.url,
                        type: 'image' as const,
                        size: img.size,
                        uploadedAt: new Date().toISOString()
                    })),
                    isOpen: true
                },
                '/classes': {
                    files: [
                        //TODO: UNCOMMENT ONCE BACKEND SETUP
                        // ...clsData.files.map((file: any) => ({
                        //     ...file,
                        //     type: file.name.split('.').pop() as FileTypeKey,
                        //     path: `/classes/${file.name}`
                        // }))
                    ],
                    isOpen: true
                }
            }));
        } catch (error) {
            toast({
                title: "Error fetching files",
                description: error instanceof Error ? error.message : "Unknown error occurred",
                variant: "destructive",
            });
        }
    };

    // Load initial files
    useEffect(() => {
        fetchAllFiles();
    }, []);

    // Handle compilation
    const handleCompile = async () => {
        setIsCompiling(true);
        try {
            const response = await fetch('/api/compile', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    texContent: latexContent,
                    projectId: 'default-project',
                    filename: 'document.pdf',
                }),
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail?.message || 'Compilation failed');
            }

            const result = await response.json();
            setPdfUrl(result.url);

            // Add PDF to files list
            const newFile: FileItem = {
                name: 'document.pdf',
                path: '/' + result.file_path,
                url: result.url,
                type: 'pdf',
                size: 0,
                uploadedAt: new Date().toISOString(),
            };

            setFolders(prev => ({
                ...prev,
                '/': {
                    ...prev['/'],
                    files: [...prev['/'].files.filter(f => f.type !== 'pdf'), newFile]
                }
            }));

            toast({
                title: "Compilation successful",
                description: "PDF has been generated",
            });
        } catch (error) {
            console.error('Error during compilation:', error);
            toast({
                title: "Compilation failed",
                description: error instanceof Error ? error.message : "Unknown error occurred",
                variant: "destructive",
            });
        }
        setIsCompiling(false);
    };

    // Toggle folder open/closed
    const toggleFolder = (path: string) => {
        setFolders(prev => ({
            ...prev,
            [path]: {
                ...prev[path],
                isOpen: !prev[path].isOpen
            }
        }));
    };

    // Load file content
    const loadFile = async (file: FileItem) => {
        setSelectedFile(file);

        try {
            if (file.type === 'cls') {
                const response = await fetch(`/api/cls/${file.name}`);
                if (response.ok) {
                    const data = await response.json();
                    setFileContent(data.content);
                }
            } else if (file.type === 'tex') {
                setLatexContent(file.content || '');
            }
            setActiveTab('editor');
        } catch (error) {
            toast({
                title: "Error loading file",
                description: error instanceof Error ? error.message : "Unknown error occurred",
                variant: "destructive",
            });
        }
    };

    // Save file
    const saveFile = async () => {
        if (!selectedFile) return;

        try {
            const formData = new FormData();
            const content = selectedFile.type === 'tex' ? latexContent : fileContent;
            const blob = new Blob([content], { type: 'text/plain' });

            if (selectedFile.type === 'cls') {
                formData.append('file', blob, selectedFile.name);
                const response = await fetch(`/api/cls/${selectedFile.name}`, {
                    method: 'POST',
                    body: formData,
                });

                if (!response.ok) {
                    throw new Error('Failed to save class file');
                }
            }

            toast({
                title: "File saved",
                description: `Successfully saved ${selectedFile.name}`,
            });

            fetchAllFiles();
        } catch (error) {
            toast({
                title: "Error saving file",
                description: error instanceof Error ? error.message : "Unknown error occurred",
                variant: "destructive",
            });
        }
    };

    // Handle image upload
    const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file) {
            await uploadImage(file);
        }
    };

    const handleCreateNewFile = async (fileName: string, fileType: FileTypeKey) => {
        try {
            // Add file extension if missing
            let finalFileName = fileName;
            const expectedExt = LATEX_FILE_TYPES[fileType].extension;
            if (!finalFileName.endsWith(expectedExt)) {
                finalFileName += expectedExt;
            }

            // Create default content based on file type
            const content = getTemplateContent(finalFileName, fileType);

            // Handle different file types
            if (['cls', 'sty', 'bst', 'dtx', 'ins'].includes(fileType)) {
                // These files need to be stored in the LaTeX service
                const formData = new FormData();
                const blob = new Blob([content], { type: 'text/plain' });
                formData.append('file', blob, finalFileName);

                const response = await fetch(`/api/latex-file/${fileType}/${finalFileName}`, {
                    method: 'POST',
                    body: formData,
                });

                if (!response.ok) {
                    throw new Error(`Failed to create ${fileType} file`);
                }
            } else {
                // These files (tex, bib) can be stored in the project directory
                const newFile: FileItem = {
                    name: finalFileName,
                    path: '/' + finalFileName,
                    type: fileType,  // TypeScript now knows this is a valid file type
                    size: content.length,
                    content: content,
                    uploadedAt: new Date().toISOString(),
                };

                setFolders(prev => ({
                    ...prev,
                    '/': {
                        ...prev['/'],
                        files: [...prev['/'].files, newFile]
                    }
                }));

                // Select the new file for editing
                setSelectedFile(newFile);
                setLatexContent(content);
                setActiveTab('editor');
            }

            toast({
                title: "Success",
                description: `Created ${finalFileName}`,
            });

            setIsDialogOpen(false);
            await fetchAllFiles();

        } catch (error) {
            toast({
                title: "Error creating file",
                description: error instanceof Error ? error.message : "Unknown error occurred",
                variant: "destructive",
            });
        }
    };

    // Helper function to get template content based on file type
    const getTemplateContent = (filename: string, fileType: FileTypeKey): string => {
        const baseName = filename.replace(/\.[^/.]+$/, ''); // Remove extension

        switch (fileType) {
            case 'tex':
                return `\\documentclass{article}
    \\begin{document}
    
    Your content here
    
    \\end{document}`;

            case 'cls':
                return `\\NeedsTeXFormat{LaTeX2e}
    \\ProvidesClass{${baseName}}[${new Date().toISOString().split('T')[0]} v1.0.0 Custom document class]
    
    \\LoadClass[11pt]{article}
    
    % Package requirements
    \\RequirePackage{geometry}
    \\RequirePackage{hyperref}
    
    % Default settings
    \\geometry{margin=1in}
    
    % Custom commands and environments
    % Add your customizations here
    
    \\endinput`;

            case 'sty':
                return `\\NeedsTeXFormat{LaTeX2e}
    \\ProvidesPackage{${baseName}}[${new Date().toISOString().split('T')[0]} v1.0.0 Custom package]
    
    % Package requirements
    \\RequirePackage{xcolor}
    \\RequirePackage{graphicx}
    
    % Package options handling
    \\DeclareOption*{\\PassOptionsToClass{\\CurrentOption}{article}}
    \\ProcessOptions\\relax
    
    % Custom commands and environments
    % Add your customizations here
    
    \\endinput`;

            case 'bib':
                return `% Bibliography Database
    
    @article{example,
        author = {Author Name},
        title = {Example Title},
        journal = {Journal Name},
        year = {${new Date().getFullYear()}},
        volume = {1},
        number = {1},
        pages = {1--10},
        doi = {10.1000/example},
    }
    
    @book{examplebook,
        author = {Book Author},
        title = {Example Book},
        publisher = {Publisher Name},
        year = {${new Date().getFullYear()}},
        address = {City, Country},
        isbn = {000-0-00-000000-0},
    }`;

            case 'bst':
                return `ENTRY
    {
      author
      title
      journal
      year
      volume
      number
      pages
      doi
    }
    {}
    { label }
    
    INTEGERS { output.state before.all }
    
    FUNCTION {init.state.consts}
    { #0 'before.all :=
      #1 'mid.sentence :=
    }
    
    STRINGS { s t }
    
    FUNCTION {output.nonnull}
    { 's :=
      output.state mid.sentence =
        { ", " * write$ }
        { output.state after.block =
            { add.period$ write$
              newline$
            }
            { output.state before.all =
                'write$
                { add.period$ " " * write$ }
              if$
            }
          if$
          mid.sentence 'output.state :=
        }
      if$
      s
    }
    
    % Add more bibliography style definitions here`;

            case 'dtx':
                return `% \\iffalse meta-comment
    %
    % ${baseName}.dtx
    % Copyright (C) ${new Date().getFullYear()} by Your Name
    %
    % This file may be distributed and/or modified under the
    % conditions of the LaTeX Project Public License, either
    % version 1.3c of this license or (at your option) any later
    % version. The latest version of this license is in:
    %
    %    http://www.latex-project.org/lppl.txt
    %
    % \\fi
    %
    % \\iffalse
    %<*driver>
    \\documentclass{ltxdoc}
    \\usepackage{${baseName}}
    \\EnableCrossrefs
    \\CodelineIndex
    \\RecordChanges
    \\begin{document}
      \\DocInput{${baseName}.dtx}
    \\end{document}
    %</driver>
    % \\fi
    %
    % \\section{Usage}
    %
    % \\changes{v1.0.0}{${new Date().toISOString().split('T')[0]}}{First public release}
    %
    % \\StopEventually{}
    %
    % \\section{Implementation}
    %
    %    \\begin{macrocode}
    %<*package>
    \\NeedsTeXFormat{LaTeX2e}
    \\ProvidesPackage{${baseName}}
      [${new Date().toISOString().split('T')[0]} v1.0.0 Package description]
    %    \\end{macrocode}
    %
    % Your implementation here
    %
    %    \\begin{macrocode}
    %</package>
    %    \\end{macrocode}
    \\endinput`;

            case 'ins':
                return `\\input docstrip.tex
    \\keepsilent
    
    \\usedir{tex/latex/${baseName}}
    
    \\preamble
    
    This is a generated file.
    Copyright (C) ${new Date().getFullYear()} by Your Name
    
    This file may be distributed and/or modified under the
    conditions of the LaTeX Project Public License, either
    version 1.3c of this license or (at your option) any later
    version.
    
    \\endpreamble
    
    \\askforoverwritefalse
    \\generate{
      \\file{${baseName}.sty}{\\from{${baseName}.dtx}{package}}
    }
    
    \\endbatchfile`;

            default:
                return '% New file';
        }
    };

    // File/Folder component
    const FileSystemItem = ({ file, folder }: { file?: FileItem; folder?: string }) => {
        if (folder) {
            const folderName = folder.split('/').pop() || folder;
            const folderData = folders[folder];

            return (
                <div>
                    <div
                        className="flex items-center p-2 hover:bg-gray-100 rounded cursor-pointer"
                        onClick={() => toggleFolder(folder)}
                    >
                        {folderData.isOpen ? (
                            <ChevronDown className="h-4 w-4 mr-2" />
                        ) : (
                            <ChevronRight className="h-4 w-4 mr-2" />
                        )}
                        <FolderOpen className="h-4 w-4 mr-2" />
                        <span className="text-sm">{folderName}</span>
                    </div>
                    {folderData.isOpen && (
                        <div className="ml-4">
                            {folderData.files.map((f) => (
                                <FileSystemItem key={f.path} file={f} />
                            ))}
                        </div>
                    )}
                </div>
            );
        }

        if (!file) return null;

        return (
            <div
                className={`flex items-center p-2 hover:bg-gray-100 rounded cursor-pointer ${selectedFile?.path === file.path ? 'bg-gray-100' : ''
                    }`}
                onClick={() => loadFile(file)}
            >
                {file.type === 'pdf' ? (
                    <FileText className="h-4 w-4 mr-2" />
                ) : file.type === 'image' ? (
                    <ImageIcon className="h-4 w-4 mr-2" />
                ) : (
                    <File className="h-4 w-4 mr-2" />
                )}
                <div className="flex-1 min-w-0">
                    <p className="text-sm truncate">{file.name}</p>
                    <p className="text-xs text-gray-500">
                        {(file.size / 1024).toFixed(1)} KB
                    </p>
                </div>
            </div>
        );
    };

    // Update the files section in the return statement
    return (
        <div className='w-full min-h-full h-full'>
            <ResizablePanelGroup direction="horizontal" className='min-h-full h-full'>
                <ResizablePanel defaultSize={20} minSize={15}>
                    <div className="h-full flex flex-col border-r">
                        <div className="p-4 border-b">
                            <h2 className="font-semibold mb-4">Project Files</h2>
                            <div className="space-y-2">
                                <Button
                                    variant="outline"
                                    size="sm"
                                    className="w-full justify-start"
                                    onClick={() => setIsDialogOpen(true)}
                                >
                                    <Plus className="h-4 w-4 mr-2" />
                                    New File
                                </Button>
                                <CreateFileDialog
                                    isOpen={isDialogOpen}
                                    onOpenChange={setIsDialogOpen}
                                    onCreateFile={handleCreateNewFile}
                                />
                                <Button
                                    variant="outline"
                                    className="w-full justify-start"
                                    onClick={() => document.getElementById('file-upload')?.click()}
                                    disabled={isUploading}
                                >
                                    {isUploading ? (
                                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                    ) : (
                                        <Upload className="mr-2 h-4 w-4" />
                                    )}
                                    Upload Image
                                </Button>
                                <input
                                    id="file-upload"
                                    type="file"
                                    accept="image/*"
                                    onChange={handleImageUpload}
                                    className="hidden"
                                />
                            </div>
                        </div>
                        <div className="flex-1 overflow-auto p-4">
                            {uploadError && (
                                <Alert variant="destructive" className="mb-4">
                                    <AlertDescription>{uploadError}</AlertDescription>
                                </Alert>
                            )}
                            {Object.entries(folders).map(([path]) => (
                                <FileSystemItem key={path} folder={path} />
                            ))}
                        </div>
                    </div>
                </ResizablePanel>
                <ResizableHandle withHandle />
                <ResizablePanel defaultSize={80}>
                    <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full flex flex-col">
                        <div className="flex justify-between items-center border-b px-4 py-1">
                            <Button
                                onClick={handleCompile}
                                disabled={isCompiling}
                            >
                                {isCompiling ? (
                                    <>
                                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                        Compiling...
                                    </>
                                ) : (
                                    'Compile'
                                )}
                            </Button>
                            <TabsList>
                                <TabsTrigger value="editor">Editor</TabsTrigger>
                                <TabsTrigger value="preview">Preview</TabsTrigger>
                            </TabsList>
                        </div>
                        <div className="flex-1 overflow-hidden">
                            <TabsContent value="editor" className="h-full m-0">
                                <div className="h-full flex flex-col p-1">
                                    {selectedFile?.type === 'cls' ? (
                                        <>
                                            <div className="flex justify-between items-center mb-4">
                                                <h2 className="text-lg font-semibold">
                                                    Editing: {selectedFile.name}
                                                </h2>
                                                <Button onClick={saveFile}>
                                                    <Save className="h-4 w-4 mr-2" />
                                                    Save Changes
                                                </Button>
                                            </div>
                                            <div className="flex-1">
                                                <MonacoEditor
                                                    value={fileContent}
                                                    onChange={setFileContent}
                                                />
                                            </div>
                                        </>
                                    ) : (
                                        <>
                                            <MonacoEditor
                                                value={latexContent}
                                                onChange={setLatexContent}
                                            />
                                        </>
                                    )}
                                </div>
                            </TabsContent>
                            <TabsContent value="preview" className="h-full m-0">
                                {pdfUrl ? (
                                    <PDFViewer url={pdfUrl} />
                                ) : (
                                    <div className="h-full flex items-center justify-center text-gray-500">
                                        Compiled PDF will appear here
                                    </div>
                                )}
                            </TabsContent>
                        </div>
                    </Tabs>
                </ResizablePanel>
            </ResizablePanelGroup>
        </div>
    );
};

export default Project;

================
File: src/app/signin/client.tsx
================
'use client'

import Link from "next/link"
import Image from "next/image"
import { Separator } from "@/components/ui/separator"
import GoogleAuthButton from "@/components/ui/button/google-auth"
import EmailAuthForm from '@/components/Forms/EmailAuthForm'
import { EmailSignInFormSchema } from "@/types"
import { z } from "zod"
import { SIGNIN_RETURN_TYPES } from "@/constants"

interface SignInClientProps {
    searchParams: { status: string; }
    signIn: (values: z.infer<typeof EmailSignInFormSchema>) => Promise<never>
}

export default function SignInClient({ searchParams, signIn }: SignInClientProps) {
    return (
        <div className="h-screen flex flex-col justify-center items-center align-middle gap-2">
            <div className="w-full lg:w-3/4 xl:w-1/2 h-screen flex flex-col justify-center items-center align-middle">
                <div className="flex flex-row justify-center align-middle items-center">
                    <Image src={'/CoLabPaper.svg'} width={80} height={80} alt="rekall-logo" />
                </div>
                <EmailAuthForm
                    formHeaderMessage="Welcome back"
                    action={signIn}
                    formButtonMessage="Sign in"
                />
                {searchParams.status && searchParams.status === SIGNIN_RETURN_TYPES.INVALID_CREDENTIALS && (
                    <div className="w-3/4 md:w-1/2 mb-4">
                        <p className="text-red-500 text-sm text-left">Incorrect email or password</p>
                    </div>
                )}
                {searchParams.status && searchParams.status === SIGNIN_RETURN_TYPES.ERROR && (
                    <div className="w-3/4 md:w-1/2 mb-4">
                        <p className="text-red-500 text-sm text-left">Could not authenticate user</p>
                    </div>
                )}
                <div className="w-3/4 md:w-1/2 flex flex-row justify-center align-middle items-center my-2">
                    <div>
                        <span className="text-primary text-md">Don&#39;t have an account?</span>
                        <Link href={'/signup'} className="text-primary text-sm px-2 cursor-pointer">
                            Sign Up
                        </Link>
                    </div>
                </div>
                <div className="w-3/4 md:w-1/2 flex flex-row justify-center align-middle items-center mb-4 mt-2">
                    <Separator className="w-1/3" />
                    <span className="w-1/3 text-center">OR</span>
                    <Separator className="w-1/3" />
                </div>
                <div className="w-3/4 md:w-1/2 flex flex-col justify-center align-middle items-center">
                    <GoogleAuthButton />
                </div>
            </div>
        </div>
    )
}

================
File: src/app/signin/page.tsx
================
import { headers } from "next/headers"
import { createClient } from "@/utils/supabase/server"
import { redirect } from "next/navigation"
import { EmailSignInFormSchema } from "@/types/form.type"
import { z } from "zod"
import SignInClient from "./client"
import { SIGNIN_RETURN_TYPES } from "@/constants"

interface SignInPageProps {
  searchParams: { status: string; memoryID?: string }
}

export default function SignInPage(props: SignInPageProps) {
  async function signIn(values: z.infer<typeof EmailSignInFormSchema>): Promise<never> {
    "use server"

    const origin = headers().get("origin")
    const email = values.email
    const password = values.password
    const supabase = createClient()

    const { error } = await (await supabase).auth.signInWithPassword({
      email,
      password,
    })

    if (error) {
      if (error) {
        if (error.message === "Invalid login credentials") {
          redirect(`/signin?status=${SIGNIN_RETURN_TYPES.INVALID_CREDENTIALS}`)
        }
        redirect(`/signin?status=${SIGNIN_RETURN_TYPES.ERROR}`)
      }
    }

    return redirect(`${origin}`)
  }

  return <SignInClient searchParams={props.searchParams} signIn={signIn} />
}

================
File: src/app/signup/client.tsx
================
'use client'

import Link from "next/link"
import Image from "next/image"
import { Separator } from "@/components/ui/separator"
import GoogleAuthButton from "@/components/ui/button/google-auth"
import { Button } from "@/components/ui/button/index"
import EmailSignUpForm from "@/components/Forms/EmailSignUpForm"
import { EmailAndProfileSignUpSchema } from "@/types"
import { SIGNUP_RETURN_TYPES } from "@/constants"
import { z } from "zod"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Mail } from "lucide-react"

interface SignUpClientProps {
    searchParams: { status?: string; email?: string; memoryID?: string; message?: string }
    signUp: (values: z.infer<typeof EmailAndProfileSignUpSchema>) => Promise<never>
}

export default function SignUpClient({ searchParams, signUp }: SignUpClientProps) {
    const getEmailClient = (email: string): { clientURI: string; clientName: string; clientIconPath: string } | null => {
        const emailDomain = email.split('@')[1]

        const emailClients = {
            'gmail.com': {
                clientURI: 'https://mail.google.com',
                clientName: 'Gmail',
                clientIconPath: '/icons/email-clients/gmail.png'
            },
            'outlook.com': {
                clientURI: 'https://outlook.live.com',
                clientName: 'Outlook',
                clientIconPath: '/icons/email-clients/outlook.png'
            },
            'hotmail.com': {
                clientURI: 'https://outlook.live.com',
                clientName: 'Outlook',
                clientIconPath: '/icons/email-clients/outlook.png'
            },
            'live.com': {
                clientURI: 'https://outlook.live.com',
                clientName: 'Outlook',
                clientIconPath: '/icons/email-clients/outlook.png'
            },
            'yahoo.com': {
                clientURI: 'https://mail.yahoo.com',
                clientName: 'Yahoo Mail',
                clientIconPath: '/icons/email-clients/yahoomail.png'
            },
            'icloud.com': {
                clientURI: 'https://www.icloud.com/mail',
                clientName: 'iCloud',
                clientIconPath: '/icons/email-clients/icloud.png'
            },
            'protonmail.com': {
                clientURI: 'https://mail.protonmail.com',
                clientName: 'ProtonMail',
                clientIconPath: '/icons/email-clients/protonmail.png'
            }
        }

        return emailClients[emailDomain as keyof typeof emailClients] || null
    }

    const emailClientData = searchParams.email ? getEmailClient(decodeURIComponent(searchParams.email)) : undefined
    const isConfirmEmail = searchParams.status === SIGNUP_RETURN_TYPES.CONFIRM_EMAIL && searchParams.email
    const isAlreadyRegistered = searchParams.status === SIGNUP_RETURN_TYPES.ALREAD_REGISTERED_ERROR

    return (
        <div className="min-h-screen w-full bg-background flex flex-col justify-center items-center p-4">
            <div className="w-full max-w-[600px] space-y-6">
                {/* Logo */}
                <div className="flex justify-center mb-8">
                    <Image
                        src={'/CoLabPaper.svg'}
                        width={80}
                        height={80}
                        alt="CoLabPaper Icon"
                        className="transition-transform hover:scale-105"
                    />
                </div>

                {isConfirmEmail ? (
                    <div className="space-y-6 text-center">
                        <div className="space-y-2">
                            <h1 className="text-2xl font-bold tracking-tight">Verify your email</h1>
                            <p className="text-muted-foreground">
                                We sent an email to <span className="font-medium text-foreground">{decodeURIComponent(searchParams.email!)}</span>
                            </p>
                            <p className="text-muted-foreground">Click the link inside to get started.</p>
                        </div>

                        {emailClientData && (
                            <Button
                                className="w-full sm:w-auto"
                                size="lg"
                                onClick={() => window.open(emailClientData.clientURI, '_blank')}
                            >
                                {/* <Mail className="mr-2 h-4 w-4" /> */}
                                <Image src={emailClientData.clientIconPath} alt={emailClientData.clientName + 'Icon'} width={20} height={20} className="mr-2" />
                                Open {emailClientData.clientName}
                            </Button>
                        )}
                    </div>
                ) : (
                    <div className="space-y-6">
                        <div className="space-y-4">
                            <EmailSignUpForm
                                action={signUp}
                                formHeaderMessage="Create an account"
                                formButtonMessage="Sign Up"
                            />

                            {isAlreadyRegistered && (
                                <Alert variant="destructive">
                                    <AlertDescription>
                                        This email is already registered. Please sign in or use a different email.
                                    </AlertDescription>
                                </Alert>
                            )}
                        </div>

                        <div className="space-y-4">
                            <div className="flex items-center justify-center text-sm">
                                <span className="text-muted-foreground">Already have an account?</span>
                                <Link
                                    href={searchParams.memoryID ? `/signin?memoryID=${searchParams.memoryID}` : '/signin'}
                                    className="ml-2 text-primary hover:text-primary/80 transition-colors"
                                >
                                    Sign In
                                </Link>
                            </div>

                            <div className="relative">
                                <div className="absolute inset-0 flex items-center">
                                    <Separator className="w-full" />
                                </div>
                                <div className="relative flex justify-center">
                                    <span className="bg-background px-2 text-muted-foreground text-sm">
                                        OR
                                    </span>
                                </div>
                            </div>

                            <GoogleAuthButton />
                        </div>
                    </div>
                )}
            </div>
        </div>
    )
}

================
File: src/app/signup/page.tsx
================
import { headers } from "next/headers"
import { createClient } from "@/utils/supabase/server"
import { redirect } from "next/navigation"
import { EmailAndProfileSignUpSchema } from "@/types"
import { z } from "zod"
import SignUpClient from "./client"
import { SIGNUP_RETURN_TYPES } from "@/constants"

interface SignUpPageProps {
  searchParams: { status: string; email: string; }
}

export default function SignUpPage(props: SignUpPageProps) {
  async function signUp(values: z.infer<typeof EmailAndProfileSignUpSchema>): Promise<never> {
    "use server"

    const origin = headers().get("origin")
    const email = values.email
    const password = values.password
    const supabase = await createClient()

    // First, create a temporary profile
    const { error: tempProfileError } = await supabase
      .from('temp_profile')
      .insert({
        user_id: undefined, // This will be updated after user creation
        email: values.email,
        username: values.username,
        first_name: values.first_name,
        last_name: values.last_name
      })

    if (tempProfileError) {
      console.error("Error creating temp profile:", tempProfileError)
      redirect(`/signup?status=${SIGNUP_RETURN_TYPES.ERROR}`)
    }

    let redirectTo = `${origin}/api/${process.env.NEXT_PUBLIC_API_VERSION}/auth/callback`

    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: redirectTo,
      },
    })

    if (error) {
      if (error.status === 422 && error.message === "User already registered") {
        return redirect(`/signup?status=${SIGNUP_RETURN_TYPES.ALREAD_REGISTERED_ERROR}`)
      }
      console.error("Signup error:", error)
      return redirect(`/signup?status=${SIGNUP_RETURN_TYPES.ERROR}&message=${encodeURIComponent(error.message)}`)
    }

    // Update the temp profile with the user ID
    if (data.user) {
      const { error: updateError } = await supabase
        .from('temp_profile')
        .update({ user_id: data.user.id })
        .eq('email', email)

      if (updateError) {
        console.error("Error updating temp profile:", updateError)
      }
    }

    // Redirect to confirmation page
    return redirect(`/signup?status=${SIGNUP_RETURN_TYPES.CONFIRM_EMAIL}&email=${encodeURIComponent(email)}`)
  }

  return <SignUpClient searchParams={props.searchParams} signUp={signUp} />
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 120 20% 94%;
    --foreground: 120 13% 38%;

    --card: 120 20% 94%;
    --card-foreground: 120 13% 38%;

    --popover: 120 20% 94%;
    --popover-foreground: 120 13% 38%;

    --primary: 120 13% 38%;
    --primary-foreground: 120 20% 94%;

    --secondary: 120 20% 58%;
    --secondary-foreground: 120 13% 38%;

    --muted: 120 15% 84%;
    --muted-foreground: 120 13% 48%;

    --accent: 120 20% 78%;
    --accent-foreground: 120 13% 38%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 120 15% 84%;
    --input: 120 15% 84%;
    --ring: 120 13% 38%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 120 13% 18%;
    --foreground: 120 20% 94%;

    --card: 120 13% 18%;
    --card-foreground: 120 20% 94%;

    --popover: 120 13% 18%;
    --popover-foreground: 120 20% 94%;

    --primary: 120 20% 84%;
    --primary-foreground: 120 13% 18%;

    --secondary: 120 20% 38%;
    --secondary-foreground: 120 20% 94%;

    --muted: 120 13% 28%;
    --muted-foreground: 120 20% 84%;

    --accent: 120 13% 28%;
    --accent-foreground: 120 20% 94%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 120 20% 94%;

    --border: 120 13% 28%;
    --input: 120 13% 28%;
    --ring: 120 20% 84%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }

  .debug {
    outline: 1px solid red;
  }
}

================
File: src/app/layout.tsx
================
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { ThemeProvider } from '@/context/ThemeContext'
import { cn } from '@/utils/styleHelpers'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'CoLabPaper',
  description: 'An AI powered, online, collaborative LaTeX editor',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={cn("min-h-screen", inter.className)}>
        <ThemeProvider
          attribute="class"
          defaultTheme="light"
          // enableSystem
          disableTransitionOnChange
        >
          {children}
        </ThemeProvider>
      </body>
    </html>
  )
}

================
File: src/app/page.tsx
================
import { createClient } from "@/utils/supabase/server"
import { redirect } from 'next/navigation'
import SplashPage from '@/components/Marketing/splash-page'

export default async function RootPage() {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()

  console.log(user)
  // If user is authenticated, redirect to dashboard
  if (user) {
    redirect('/dashboard')
  }

  // Otherwise, show splash page
  return <SplashPage />
}

================
File: src/components/Dashboard/Navbar/Navbar.tsx
================
'use Client'
import React from 'react'
import Image from 'next/image'
import { Button } from '@/components/ui/button'
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { User } from 'lucide-react'
import { signOut } from '@/actions/auth'
import { useRouter } from 'next/navigation'

const Navbar = () => {
    const router = useRouter()

    const handleSignOut = async () => {
        try {
            await signOut()
        } catch (error) {
            console.error('Error signing out:', error)
        }
    }

    return (
        <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
            <div className="container flex h-14 items-center">
                <div className="flex flex-1 items-center justify-between">
                    {/* Logo */}
                    <div className="flex items-center space-x-2">
                        <Image
                            src="/CoLabPaper.svg"
                            width={32}
                            height={32}
                            alt="CoLabPaper"
                        />
                        <span className="font-bold hidden sm:inline-block">CoLabPaper</span>
                    </div>

                    {/* User Menu */}
                    <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="icon">
                                <User className="h-5 w-5" />
                                <span className="sr-only">User menu</span>
                            </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                            <DropdownMenuItem onClick={() => router.push('/profile')}>
                                Profile
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => router.push('/settings')}>
                                Settings
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={handleSignOut}>
                                Sign out
                            </DropdownMenuItem>
                        </DropdownMenuContent>
                    </DropdownMenu>
                </div>
            </div>
        </header>
    )
}

export default Navbar

================
File: src/components/Dashboard/Navbar/NavbarButton.tsx
================
'use client'
import React from 'react'

const SideBarToggleButton = () => {
    // handlers
    const onClick = () => {}

    return (
        <div className="btn btn-ghost normal-case text-xl" onClick={onClick}>
            CoLabPaper
        </div>
    )
}

export default SideBarToggleButton

================
File: src/components/Dashboard/CreateProjectDialog.tsx
================
'use client'
import React from 'react';
import { useRouter } from 'next/navigation';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/components/ui/use-toast";
import { Loader2 } from "lucide-react";
interface CreateProjectDialogProps {
  isOpen: boolean
  onOpenChange: (open: boolean) => void;
}

const CreateProjectDialog = (props: CreateProjectDialogProps) => {
  const [projectName, setProjectName] = React.useState('');
  const [isCreating, setIsCreating] = React.useState(false);
  const { toast } = useToast();
  const router = useRouter();

  // src/components/Dashboard/CreateProjectDialog.tsx
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!projectName.trim()) {
      toast({
        title: "Error",
        description: "Project name is required",
        variant: "destructive",
      });
      return;
    }

    setIsCreating(true);
    try {
      // Add auth headers
      const response = await fetch(`/api/${process.env.NEXT_PUBLIC_API_VERSION}/projects`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include', // Add this line
        body: JSON.stringify({
          name: projectName.trim()
        }),
      });

      if (response.status === 401) {
        // Handle unauthorized explicitly
        toast({
          title: "Error",
          description: "Session expired. Please sign in again.",
          variant: "destructive",
        });
        // Optionally redirect to login
        window.location.href = '/signin';
        return;
      }

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to create project');
      }

      const { data: project } = await response.json();

      toast({
        title: "Success",
        description: "Project created successfully",
      });

      props.onOpenChange(false);
      router.push(`/project/${project.id}`);
      router.refresh();

    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to create project",
        variant: "destructive",
      });
    } finally {
      setIsCreating(false);
    }
  };

  return (
    <Dialog open={props.isOpen} onOpenChange={props.onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Project</DialogTitle>
          <DialogDescription>
            Create a new research project. You can add references and content later.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="projectName">Project Name</Label>
              <Input
                id="projectName"
                placeholder="Enter project name"
                value={projectName}
                onChange={(e) => setProjectName(e.target.value)}
                disabled={isCreating}
                required
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={() => props.onOpenChange(false)}
              disabled={isCreating}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isCreating}>
              {isCreating ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Creating...
                </>
              ) : (
                'Create Project'
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default CreateProjectDialog;

================
File: src/components/Dashboard/DashboardDrawerContainer.tsx
================
// src/components/Dashboard/DashboardDrawerContainer.tsx
'use client'

import React, { ReactNode, useState } from 'react'
import { TableKey } from '@/types'
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

interface DashboardDrawerContainerProps {
    allProjectsComponent: ReactNode
    myProjectsComponent: ReactNode
    sharedProjectsComponent: ReactNode
    archivedProjectsComponent: ReactNode
}

const DashboardDrawerContainer = (props: DashboardDrawerContainerProps) => {
    const [currentTab, setCurrentTab] = useState<TableKey>('all')

    return (
        <Tabs value={currentTab} onValueChange={(value) => setCurrentTab(value as TableKey)}>
            <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="all">All Projects</TabsTrigger>
                <TabsTrigger value="self">My Projects</TabsTrigger>
                <TabsTrigger value="shared">Shared</TabsTrigger>
                <TabsTrigger value="archived">Archived</TabsTrigger>
            </TabsList>
            <TabsContent value="all" className="space-y-4">
                {props.allProjectsComponent}
            </TabsContent>
            <TabsContent value="self" className="space-y-4">
                {props.myProjectsComponent}
            </TabsContent>
            <TabsContent value="shared" className="space-y-4">
                {props.sharedProjectsComponent}
            </TabsContent>
            <TabsContent value="archived" className="space-y-4">
                {props.archivedProjectsComponent}
            </TabsContent>
        </Tabs>
    )
}

export default DashboardDrawerContainer

================
File: src/components/Dashboard/DashboardDrawerLink.tsx
================
'use client'
import { TableKey } from '@/types'
import React from 'react'

interface DashboardDrawerLinkProps {
    id: TableKey
    text: string
    active: boolean
    onClick: (e: React.MouseEvent<HTMLLIElement>) => void
}

const DashboardDrawerLink = (props: DashboardDrawerLinkProps) => {
    return (
        <li
            className={`w-full h-[40px] mb-2 p-1 rounded-md btn btn-ghost cursor-pointer ${props.active ? 'bg-accent text-black' : 'text-black'}`}
            onClick={props.onClick}
        >
            <span className='h-full flex flex-row justify-center items-center text-center' id={props.id}>{props.text}</span>
        </li>
    )
}

export default DashboardDrawerLink

================
File: src/components/Dashboard/LayoutDashboard.tsx
================
import React, { ReactNode } from 'react'

interface LayoutProps {
  children: ReactNode
}

const LayoutDashboard = ({ children }: LayoutProps) => {
  return (
    <div
      className="flex h-full bg-base-100"
      style={{ border: '1px solid red' }}
    >
      <div className="flex-1 flex flex-col overflow-hidden">
        <main
          className="flex-1 overflow-x-hidden overflow-y-hidden bg-dashboard"
          style={{ border: '5px solid blue' }}
        >
          {children}
        </main>
      </div>
    </div>
  )
}

export default LayoutDashboard

================
File: src/components/Dashboard/ProjectDrawer.tsx
================
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Button } from '../ui/button';
import { MoreHorizontal, File, Share2, Archive, Trash2 } from 'lucide-react';
import { useToast } from '../ui/use-toast';
import { Project } from '@/types/database.types';

interface ProjectDrawerProps {
    drawerName: string;
    searchFilter?: string;
}

const ProjectDrawer: React.FC<ProjectDrawerProps> = ({ drawerName, searchFilter = '' }) => {
    const [projects, setProjects] = useState<Project[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const router = useRouter();
    const { toast } = useToast();

    const fetchProjects = async () => {
        try {
            const response = await fetch(`/api/${process.env.NEXT_PUBLIC_API_VERSION}/projects`);
            if (!response.ok) {
                throw new Error('Failed to fetch projects');
            }
            const data = await response.json();
            setProjects(data.data);
        } catch (error) {
            toast({
                title: "Error",
                description: "Failed to load projects",
                variant: "destructive",
            });
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchProjects();
    }, []);

    const handleProjectClick = (projectId: string) => {
        router.push(`/project/${projectId}`);
    };

    const handleArchiveProject = async (projectId: string) => {
        try {
            const response = await fetch(`/api/v1/projects/${projectId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    status: 'archived'
                }),
            });

            if (!response.ok) throw new Error('Failed to archive project');

            toast({
                title: "Success",
                description: "Project archived successfully",
            });

            fetchProjects(); // Refresh the list
        } catch (error) {
            toast({
                title: "Error",
                description: "Failed to archive project",
                variant: "destructive",
            });
        }
    };

    const handleDeleteProject = async (projectId: string) => {
        try {
            const response = await fetch(`/api/v1/projects/${projectId}`, {
                method: 'DELETE',
            });

            if (!response.ok) throw new Error('Failed to delete project');

            toast({
                title: "Success",
                description: "Project deleted successfully",
            });

            fetchProjects(); // Refresh the list
        } catch (error) {
            toast({
                title: "Error",
                description: "Failed to delete project",
                variant: "destructive",
            });
        }
    };

    const filteredProjects = projects.filter(project =>
        project.name.toLowerCase().includes(searchFilter.toLowerCase())
    );

    if (isLoading) {
        return (
            <div className="flex justify-center items-center p-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="rounded-md border">
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHead>Title</TableHead>
                        <TableHead>Owner</TableHead>
                        <TableHead>Last Modified</TableHead>
                        <TableHead className="w-[70px]"></TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {filteredProjects.map((project) => (
                        <TableRow
                            key={project.id}
                            className="cursor-pointer"
                            onClick={() => handleProjectClick(project.id)}
                        >
                            <TableCell>
                                <div className="flex items-center space-x-2">
                                    <File className="h-4 w-4 text-muted-foreground" />
                                    <span>{project.name}</span>
                                </div>
                            </TableCell>
                            <TableCell>
                                {project.owner && (
                                    `${project.owner.first_name} ${project.owner.last_name}`
                                )}
                            </TableCell>
                            <TableCell>
                                {new Date(project.updated_at).toLocaleDateString()}
                            </TableCell>
                            <TableCell>
                                <DropdownMenu>
                                    <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>
                                        <Button variant="ghost" size="icon">
                                            <MoreHorizontal className="h-4 w-4" />
                                            <span className="sr-only">Open menu</span>
                                        </Button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent align="end">
                                        <DropdownMenuItem onClick={(e) => {
                                            e.stopPropagation();
                                            router.push(`/project/${project.id}/share`);
                                        }}>
                                            <Share2 className="h-4 w-4 mr-2" />
                                            Share
                                        </DropdownMenuItem>
                                        <DropdownMenuItem onClick={(e) => {
                                            e.stopPropagation();
                                            handleArchiveProject(project.id);
                                        }}>
                                            <Archive className="h-4 w-4 mr-2" />
                                            Archive
                                        </DropdownMenuItem>
                                        <DropdownMenuItem
                                            className="text-destructive"
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                handleDeleteProject(project.id);
                                            }}
                                        >
                                            <Trash2 className="h-4 w-4 mr-2" />
                                            Delete
                                        </DropdownMenuItem>
                                    </DropdownMenuContent>
                                </DropdownMenu>
                            </TableCell>
                        </TableRow>
                    ))}
                    {filteredProjects.length === 0 && (
                        <TableRow>
                            <TableCell colSpan={4} className="text-center text-muted-foreground">
                                No projects found
                            </TableCell>
                        </TableRow>
                    )}
                </TableBody>
            </Table>
        </div>
    );
};

export default ProjectDrawer;

================
File: src/components/Editor/CreateFileDialog.tsx
================
'use client'
import { useEffect, useState } from "react";
import { Button } from "../ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "../ui/dialog";
import { Label } from "../ui/label";
import { Input } from "../ui/input";
import FileNameInput from "./FileNameInput";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../ui/tabs";
import { FileTypeKey, LatexFileType } from "@/types";
import { LATEX_FILE_TYPES } from "@/constants/latex.constants";

interface CreateFileDialogProps {
    isOpen: boolean;
    onOpenChange: (open: boolean) => void;
    onCreateFile: (fileName: string, fileType: FileTypeKey) => Promise<void>;
}

// Helper function to get file type descriptions
function getFileTypeDescription(fileType: string): string {
    const descriptions: Record<string, string> = {
        'tex': 'Main LaTeX document files containing your content and document structure.',
        'cls': 'Class files define document layouts and provide reusable formatting.',
        'sty': 'Style packages contain custom commands and environments.',
        'bib': 'Bibliography databases store reference information for citations.',
        'bst': 'Bibliography style files control citation and reference formatting.',
        'dtx': 'Documented LaTeX sources combine code and documentation.',
        'ins': 'Installation files control package installation and file generation.',
    };
    return descriptions[fileType] || '';
}


const CreateFileDialog: React.FC<CreateFileDialogProps> = ({ isOpen, onOpenChange, onCreateFile }) => {
    const [localFileName, setLocalFileName] = useState('');
    const [localFileType, setLocalFileType] = useState<FileTypeKey>('tex');

    // Prevent form submission from reloading
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault(); // Add this to prevent form submission
        try {
            // Add file extension if missing
            let fileName = localFileName;
            const expectedExt = localFileType === 'cls' ? '.cls' : '.tex';
            if (!fileName.endsWith(expectedExt)) {
                fileName += expectedExt;
            }

            await onCreateFile(fileName, localFileType);

            // Only close and reset if successful
            setLocalFileName('');
            setLocalFileType('tex');
            onOpenChange(false);
        } catch (error) {
            console.error('Error creating file:', error);
            // Handle error (show toast, etc.)
        }
    };

    return (
        <Dialog
            open={isOpen}
            onOpenChange={(open) => {
                if (!open) {
                    setLocalFileName('');
                    setLocalFileType('tex');
                }
                onOpenChange(open);
            }}
        >
            <DialogContent
                onPointerDownOutside={(e) => e.preventDefault()}
                onInteractOutside={(e) => e.preventDefault()}
                className="sm:max-w-[425px]"
            >
                <DialogHeader>
                    <DialogTitle>Create New File</DialogTitle>
                </DialogHeader>
                <form onSubmit={handleSubmit} className="space-y-4">
                    <div>
                        <Label htmlFor="fileName">File Name</Label>
                        <FileNameInput
                            value={localFileName}
                            onChange={setLocalFileName}
                            fileType={localFileType}
                            className="mt-2"
                        />
                    </div>
                    <div>
                        <Label>File Type</Label>
                        <div className="flex space-x-4 mt-2">
                            <Button
                                type="button" // Make sure this is type="button"
                                variant={localFileType === 'tex' ? 'default' : 'outline'}
                                onClick={() => setLocalFileType('tex')}
                            >
                                LaTeX Document
                            </Button>
                            <Button
                                type="button" // Make sure this is type="button"
                                variant={localFileType === 'cls' ? 'default' : 'outline'}
                                onClick={() => setLocalFileType('cls')}
                            >
                                Class File
                            </Button>
                        </div>
                    </div>
                    <div className="flex justify-end space-x-2">
                        <Button
                            type="button"
                            variant="outline"
                            onClick={() => onOpenChange(false)}
                        >
                            Cancel
                        </Button>
                        <Button
                            type="submit"
                            disabled={!localFileName.trim()}
                        >
                            Create File
                        </Button>
                    </div>
                </form>
            </DialogContent>
        </Dialog>
    );
};
export default CreateFileDialog

================
File: src/components/Editor/EditorNavbar.tsx
================
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { Button } from "@/components/ui/button";
import { ChevronLeft } from 'lucide-react';
import { useProject } from '@/context/ProjectContext';

const EditorNavbar = () => {
    const router = useRouter();
    const { project, isLoading } = useProject();

    // Common separator component to ensure consistency
    const Separator = () => (
        <div className="h-5 w-[1px] bg-border/50 flex-shrink-0 ml-3 mr-3" />
    );

    return (
        <header className="sticky top-0 z-50 w-full border-b bg-primary">
            <div className="flex h-14 w-full">
                {/* Left section - fixed width matching the file browser */}
                <div className="w-[20%] min-w-[303px] max-w-[303px] border-r-2 border-primary-foreground/50 px-4 flex items-center">
                    <div className="flex items-center gap-2 w-full">
                        {/* Logo & Company Name */}
                        <div className="flex items-center gap-2">
                            <Image
                                src="/CoLabPaper.svg"
                                width={28}
                                height={28}
                                alt="CoLabPaper"
                                className="flex-shrink-0"
                            />
                            <span className="font-bold hidden sm:inline-block text-primary-foreground">CoLabPaper</span>
                        </div>

                        <Separator />

                        {/* Back to Dashboard */}
                        <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => router.push('/dashboard')}
                            className="gap-1 flex-shrink-0 text-primary-foreground hover:bg-primary-foreground/10 hover:text-primary-foreground"
                        >
                            <ChevronLeft className="h-4 w-4" />
                            Home
                        </Button>
                    </div>
                </div>

                {/* Right section - fluid width */}
                <div className="flex-1 px-4 flex items-center">
                    {isLoading ? (
                        <div className="h-4 w-32 animate-pulse rounded bg-primary-foreground/10"></div>
                    ) : project?.name && (
                        <span className="font-medium truncate text-primary-foreground">{project.name}</span>
                    )}
                </div>
            </div>
        </header>
    );
}

export default EditorNavbar;

================
File: src/components/Editor/EditorWrapper.tsx
================
'use client';

import React, { useEffect, useRef } from 'react';
import * as monaco from 'monaco-editor';
import { editor } from 'monaco-editor';

interface EditorWrapperProps {
    value: string;
    onChange: (value: string) => void;
}

const EditorWrapper: React.FC<EditorWrapperProps> = ({ value, onChange }) => {
    const editorRef = useRef<HTMLDivElement>(null);
    const monacoEditorRef = useRef<editor.IStandaloneCodeEditor | null>(null);

    useEffect(() => {
        if (editorRef.current) {
            // Register LaTeX language
            monaco.languages.register({ id: 'latex' });
            monaco.languages.setMonarchTokensProvider('latex', {
                tokenizer: {
                    root: [
                        [/\\[a-zA-Z]+/, 'keyword'],
                        [/\{|\}|\[|\]/, 'bracket'],
                        [/\$.*?\$/, 'variable'],
                        [/%.*$/, 'comment'],
                    ]
                }
            });

            monacoEditorRef.current = monaco.editor.create(editorRef.current, {
                value: value,
                language: 'latex',
                theme: 'vs-dark',
                minimap: { enabled: false },
                automaticLayout: true,
            });

            monacoEditorRef.current.onDidChangeModelContent(() => {
                onChange(monacoEditorRef.current?.getValue() || '');
            });
        }

        return () => {
            monacoEditorRef.current?.dispose();
        };
    }, []);

    useEffect(() => {
        if (monacoEditorRef.current && value !== monacoEditorRef.current.getValue()) {
            monacoEditorRef.current.setValue(value);
        }
    }, [value]);

    return <div ref={editorRef} style={{ width: '100%', height: '100%' }} />;
};

export default EditorWrapper;

================
File: src/components/Editor/FileNameInput.tsx
================
// components/FileNameInput.tsx
import React, { useState, useEffect } from 'react';
import { Input } from '@/components/ui/input';
import { FileTypeKey } from '@/types';
import { LATEX_FILE_TYPES } from '@/constants/latex.constants';

interface FileNameInputProps {
    value: string;
    onChange: (value: string) => void;
    fileType: FileTypeKey;
    className?: string;
    placeholder?: string;
}

const FileNameInput: React.FC<FileNameInputProps> = ({
    value,
    onChange,
    fileType,
    className = '',
    placeholder
}) => {
    const [baseName, setBaseName] = useState('');
    const extension = LATEX_FILE_TYPES[fileType].extension;

    useEffect(() => {
        const withoutExt = value.replace(new RegExp(`${extension}$`), '');
        setBaseName(withoutExt);
    }, [value, extension]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const newBaseName = e.target.value;
        setBaseName(newBaseName);
        onChange(newBaseName);
    };

    return (
        <div className={`relative ${className}`}>
            <Input
                value={baseName}
                onChange={handleChange}
                className="pr-12"
                placeholder={placeholder}
            />
            <div className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 pointer-events-none">
                {extension}
            </div>
        </div>
    );
};

export default FileNameInput;

================
File: src/components/Editor/PDFViewer.tsx
================
import React from 'react'
import { Document, Page } from 'react-pdf'

interface PDFViewerProps {
    url: string
}
const PDFViewer = (props: PDFViewerProps) => {
    return (
        <div className="h-full overflow-auto">
            <Document file={props.url}>
                <Page pageNumber={1} />
            </Document>
        </div>
    )
}

export default PDFViewer

================
File: src/components/Forms/EmailAuthForm.tsx
================
// src/components/Forms/EmailAuthForm.tsx
'use client'

import React, { useState, useMemo } from 'react'
import { z } from "zod"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { SubmitButton } from '@/components/ui/button/submit'
import { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/ui/form'
import { Input } from '../ui/input'
import { EmailSignInFormSchema } from '@/types'
import { getSVGFromName } from '@/components/Icons'

interface EmailAuthFormProps {
    action: (values: z.infer<typeof EmailSignInFormSchema>) => Promise<never>
    formHeaderMessage: string
    formButtonMessage: string
}

const EmailAuthForm = (props: EmailAuthFormProps) => {
    const [showPassword, setShowPassword] = useState<boolean>(false)
    const form = useForm<z.infer<typeof EmailSignInFormSchema>>({
        resolver: zodResolver(EmailSignInFormSchema),
        defaultValues: {
            email: "",
            password: ""
        },
    })

    const toggleShowPassword = () => {
        setShowPassword(!showPassword)
    }

    const onSubmit = async (values: z.infer<typeof EmailSignInFormSchema>) => {
        try {
            await props.action(values)
        } catch (error) {
            console.error("Error signing up:", error)
        }
    }

    const eyeSVG = useMemo(() => {
        return getSVGFromName('Eye', { "aria-label": 'View Password', fillcolor: 'currentColor' })
    }, [])

    const hideEyeSVG = useMemo(() => {
        return getSVGFromName('HideEye', { "aria-label": 'Hide Password', fillcolor: 'currentColor' })
    }, [])

    return (
        <div className="w-full flex flex-col justify-center items-center align-middle gap-2">
            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="w-3/4 md:w-1/2 animate-in flex flex-col justify-center items-center gap-2">
                    <div className="flex flex-col justify-center items-center mb-2 mt-8">
                        <span className="text-foreground font-extrabold text-3xl">{props.formHeaderMessage}</span>
                    </div>
                    <div className='w-full'>
                        <FormField
                            control={form.control}
                            name="email"
                            render={({ field }) => (
                                <FormItem>
                                    <FormControl>
                                        <Input placeholder="Email" className="bg-background border-input" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    </div>
                    <div className='w-full'>
                        <FormField
                            control={form.control}
                            name="password"
                            render={({ field }) => (
                                <FormItem>
                                    <FormControl>
                                        <div className="flex flex-row justify-center align-middle items-center">
                                            <Input
                                                type={showPassword ? "text" : "password"}
                                                placeholder="Enter your password"
                                                className="bg-background border-input"
                                                {...field}
                                            />
                                            <div
                                                className='flex flex-row justify-center align-middle items-center w-[30px] h-[30px] cursor-pointer px-[2px] text-muted-foreground hover:text-foreground transition-colors'
                                                onClick={toggleShowPassword}
                                            >
                                                {showPassword ? eyeSVG : hideEyeSVG}
                                            </div>
                                        </div>
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    </div>
                    <SubmitButton
                        className="bg-primary hover:bg-primary/90 text-primary-foreground rounded-md px-4 py-2 mb-2 text-md w-full"
                    >
                        {props.formButtonMessage}
                    </SubmitButton>
                </form>
            </Form>
        </div>
    )
}

export default EmailAuthForm

================
File: src/components/Forms/EmailSignUpForm.tsx
================
// src/components/Forms/EmailSignUpForm.tsx
'use client'

import React, { useMemo, useState } from 'react'
import { z } from "zod"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { SubmitButton } from '@/components/ui/button/submit'
import { Form, FormControl, FormField, FormItem, FormMessage } from '../ui/form'
import { Input } from '../ui/input'
import { EmailAndProfileSignUpSchema } from '@/types'
import { getSVGFromName } from '@/components/Icons'

interface EmailSignUpFormProps {
    action: (values: z.infer<typeof EmailAndProfileSignUpSchema>) => Promise<never>
    formHeaderMessage: string
    formButtonMessage: string
}

const EmailSignUpForm = (props: EmailSignUpFormProps) => {
    const [showPassword, setShowPassword] = useState<boolean>(false)
    const form = useForm<z.infer<typeof EmailAndProfileSignUpSchema>>({
        resolver: zodResolver(EmailAndProfileSignUpSchema),
        defaultValues: {
            email: "",
            password: "",
            first_name: "",
            last_name: "",
            username: ""
        },
    })

    const toggleShowPassword = () => {
        setShowPassword(!showPassword)
    }

    const onSubmit = async (values: z.infer<typeof EmailAndProfileSignUpSchema>) => {
        try {
            await props.action(values)
        } catch (error) {
            console.error("Error signing up:", error)
        }
    }

    const eyeSVG = useMemo(() => {
        return getSVGFromName('Eye', { "aria-label": 'View Password', fillcolor: 'currentColor' })
    }, [])

    const hideEyeSVG = useMemo(() => {
        return getSVGFromName('HideEye', { "aria-label": 'Hide Password', fillcolor: 'currentColor' })
    }, [])

    return (
        <div className="w-full flex flex-col justify-center items-center align-middle gap-2">
            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="w-3/4 md:w-1/2 animate-in flex flex-col justify-center items-center gap-2">
                    <div className="flex flex-col justify-center items-center mb-2 mt-8">
                        <span className="text-foreground font-extrabold text-2xl lg:text-3xl">
                            {props.formHeaderMessage}
                        </span>
                    </div>
                    <div className='w-full'>
                        <FormField
                            control={form.control}
                            name="email"
                            render={({ field }) => (
                                <FormItem>
                                    <FormControl>
                                        <Input
                                            placeholder="Email"
                                            className="bg-background border-input"
                                            {...field}
                                        />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    </div>
                    <div className='w-full flex flex-row gap-1'>
                        <div className='w-1/2'>
                            <FormField
                                control={form.control}
                                name="first_name"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormControl>
                                            <Input
                                                placeholder="First Name"
                                                className="bg-background border-input"
                                                {...field}
                                            />
                                        </FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                        </div>
                        <div className='w-1/2'>
                            <FormField
                                control={form.control}
                                name="last_name"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormControl>
                                            <Input
                                                placeholder="Last Name"
                                                className="bg-background border-input"
                                                {...field}
                                            />
                                        </FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                        </div>
                    </div>
                    <div className='w-full'>
                        <FormField
                            control={form.control}
                            name="username"
                            render={({ field }) => (
                                <FormItem>
                                    <FormControl>
                                        <Input
                                            placeholder="Username"
                                            className="bg-background border-input"
                                            {...field}
                                        />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    </div>
                    <div className='w-full'>
                        <FormField
                            control={form.control}
                            name="password"
                            render={({ field }) => (
                                <FormItem>
                                    <FormControl>
                                        <div className="flex flex-row justify-center align-middle items-center">
                                            <Input
                                                type={showPassword ? "text" : "password"}
                                                placeholder="Enter your password"
                                                className="bg-background border-input"
                                                {...field}
                                            />
                                            <div
                                                className='flex flex-row justify-center align-middle items-center w-[30px] h-[30px] cursor-pointer px-[2px] text-muted-foreground hover:text-foreground transition-colors'
                                                onClick={toggleShowPassword}
                                            >
                                                {showPassword ? eyeSVG : hideEyeSVG}
                                            </div>
                                        </div>
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    </div>
                    <SubmitButton
                        className="bg-primary hover:bg-primary/90 text-primary-foreground rounded-md px-4 py-2 mb-2 text-md w-full"
                    >
                        {props.formButtonMessage}
                    </SubmitButton>
                </form>
            </Form>
        </div>
    )
}

export default EmailSignUpForm

================
File: src/components/Icons/index.tsx
================
import { ReactElement, ReactNode, SVGProps } from 'react'
import * as SVGIcons from './SVG'
import { ExtendSVGProps } from './SVG'

export type SVGNames = 'Memory' | 'Explore' | 'Home' | 'Search' | 'World' | 'Shared' | 'Private' | 'Account' | 'Hamburger' | 'Play' | 'Pause' | 'FullScreen' | 'MinScreen' | 'Settings' | 'Eye' | 'HideEye' | 'Check' | 'AddImage' | 'AnimatedCheckmark' | 'Add'

const NameToSVGMap = new Map<SVGNames, (props: ExtendSVGProps) => JSX.Element>([
    ['Memory', SVGIcons.MemorySVG],
    ['Explore', SVGIcons.ExploreSVG],
    ['Home', SVGIcons.HomeSVG],
    ['Search', SVGIcons.SearchSVG],
    ['World', SVGIcons.WorldSVG],
    ['Shared', SVGIcons.SharedSVG],
    ['Private', SVGIcons.PrivateSVG],
    ['Account', SVGIcons.AccountSVG],
    ['Hamburger', SVGIcons.HamburgerSVG],
    ['Play', SVGIcons.PlaySVG],
    ['Pause', SVGIcons.PauseSVG],
    ['FullScreen', SVGIcons.FullScreenSVG],
    ['MinScreen', SVGIcons.MinScreenSVG],
    ['Settings', SVGIcons.SettingsSVG],
    ['Eye', SVGIcons.EyeSVG],
    ['HideEye', SVGIcons.HideEyeSVG],
    ['Check', SVGIcons.CheckSVG],
    ['AddImage', SVGIcons.AddImageSVG],
    ['AnimatedCheckmark', SVGIcons.AnimatedCheckmark],
    ['Add', SVGIcons.AddSVG]
])

export const getSVGFromName = (svgName: SVGNames, svgProps?: ExtendSVGProps) => {
    const SVGComponent = NameToSVGMap.get(svgName)
    if (SVGComponent) {
        return <SVGComponent {...svgProps} />
    }
    return null
}

export { SVGIcons, type ExtendSVGProps }

================
File: src/components/Icons/SVG.tsx
================
import * as React from "react"
import { SVGProps } from "react"

export interface ExtendSVGProps extends SVGProps<SVGSVGElement> {
    fillcolor?: string;
}

const SettingsSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "evenodd",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 100 100"
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            d="m42 960.362-1.906 10.5a32.95 32.95 0 0 0-5.344 2.219l-8.813-6.063-11.312 11.313 6.094 8.781a32.735 32.735 0 0 0-2.219 5.344L8 994.362v16l10.5 1.906c.586 1.864 1.359 3.64 2.25 5.344l-6.125 8.781 11.313 11.313 8.78-6.063a32.97 32.97 0 0 0 5.376 2.22l1.906 10.5h16l1.906-10.5a32.757 32.757 0 0 0 5.344-2.22l8.781 6.063 11.313-11.313-6.094-8.78a32.72 32.72 0 0 0 2.219-5.313L92 1010.362v-16l-10.531-1.906a32.735 32.735 0 0 0-2.188-5.313l6.063-8.812-11.313-11.313-8.781 6.063a32.753 32.753 0 0 0-5.344-2.219L58 960.362H42zm8 24c9.941 0 18 8.059 18 18s-8.059 18-18 18-18-8.059-18-18 8.059-18 18-18z"
            overflow="visible"
            transform="translate(0 -952.362)"
        />
    </svg>
)

const MinScreenSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "evenodd",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 100 100"
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            d="M80.769 40.769H62.308a3.077 3.077 0 0 1-3.077-3.077v-18.46h6.153v15.384h15.384v6.153h.001zM19.231 59.231h18.461a3.077 3.077 0 0 1 3.077 3.077v18.461h-6.153V65.384H19.231v-6.153zm61.538 6.153H65.384v15.384h-6.153V62.307a3.077 3.077 0 0 1 3.077-3.077h18.461v6.154zM19.231 34.616h15.384V19.232h6.153v18.461a3.077 3.077 0 0 1-3.077 3.077h-18.46v-6.154z"
        />
    </svg>
)

const FullScreenSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        style={{
            fillRule: "evenodd",
            clipRule: "evenodd"
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 100 100"
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            d="M62.3 16.175h18.45a3.075 3.075 0 0 1 3.075 3.075V37.7h-6.15V26.673L64.474 39.874l-4.348-4.348 13.201-13.201H62.3v-6.15zm-22.426 48.3-13.201 13.2H37.7v6.15H19.25a3.075 3.075 0 0 1-3.075-3.075V62.3h6.15v11.027l13.201-13.201 4.348 4.349zm-13.201-42.15 13.201 13.201-4.348 4.348-13.201-13.201V37.7h-6.15V19.25a3.075 3.075 0 0 1 3.075-3.075H37.7v6.15H26.673zm37.801 37.801 13.201 13.201V62.3h6.15v18.45a3.075 3.075 0 0 1-3.075 3.075H62.3v-6.15h11.027L60.126 64.474l4.348-4.348z"
        />
    </svg>
)

const PauseSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 100 100"
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            d="M25.496 22.352a1.809 1.809 0 0 0-1.8 1.8v51.696a1.809 1.809 0 0 0 1.8 1.8h15.645a1.809 1.809 0 0 0 1.8-1.8V24.153a1.809 1.809 0 0 0-1.8-1.801zM58.859 22.352a1.809 1.809 0 0 0-1.8 1.8v51.696a1.809 1.809 0 0 0 1.8 1.8h15.645a1.809 1.809 0 0 0 1.8-1.8V24.153a1.809 1.809 0 0 0-1.8-1.801z"
        />
    </svg>
)

const PlaySVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 100 100"
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            d="m28.991 23.033.519.031.513.217 42 25c1.303.776 1.303 2.662 0 3.438l-42 24.999C28.69 77.512 27 76.551 27 75V25c.056-.89.566-1.692 1.481-1.933l.51-.034z"
        />
    </svg>
)

const AccountSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 18.999 19"
        {...props}
    >
        <clipPath id="a">
            <path d="M0 0h18.999v19H0z" />
        </clipPath>
        <g clipPath="url(#a)">
            <path
                fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
                d="M9.5 0a9.487 9.487 0 0 0-6.38 16.52.426.426 0 0 0 .12.11c.01.01.03.02.04.03a9.434 9.434 0 0 0 12.438 0c.01-.01.03-.02.04-.03a.427.427 0 0 0 .12-.11A9.487 9.487 0 0 0 9.5 0Zm0 3.05a4.075 4.075 0 1 1-4.08 4.08A4.084 4.084 0 0 1 9.5 3.05ZM9.5 18a8.5 8.5 0 0 1-5.42-1.95c-.27-.23-.53-.48-.78-.74.54-1.07 2.04-2.77 6.2-2.77s5.66 1.7 6.2 2.77c-.25.26-.51.51-.78.74A8.5 8.5 0 0 1 9.5 18Z"
            />
        </g>
    </svg>
)

const HamburgerSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 52.004 23"
        {...props}
    >
        <g
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
        >
            <path d="M1.5 3h49.004a1.5 1.5 0 1 0 0-3H1.5a1.5 1.5 0 1 0 0 3ZM50.504 10.05H1.5a1.5 1.5 0 1 0 0 3h49.004a1.5 1.5 0 1 0 0-3ZM50.504 20H1.5a1.5 1.5 0 1 0 0 3h49.004a1.5 1.5 0 1 0 0-3Z" />
        </g>
    </svg>
)

const PrivateSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 48.496 57.892"
        {...props}
    >
        <g
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
        >
            <path d="M24.755.01c7.78.276 13.867 6.808 13.59 14.593-.282 7.781-6.813 13.867-14.598 13.586-7.782-.277-13.863-6.808-13.586-14.594C10.438 5.814 16.969-.268 24.755.01M0 56.29c0 .398.102.8.4 1.102.198.3.6.5 1 .5h45.698c.398 0 .8-.2 1-.5.3-.301.398-.7.398-1.102-.3-2.602-.8-5-1.699-7.3-.101-.102-.101-.2-.101-.302-2.5-6.601-7.301-11.699-13.102-14.398-.102 0-.102 0-.102-.101-2.898-1.3-5.898-2-9.199-2C11.801 32.291 1.301 42.689 0 56.291Z" />
        </g>
    </svg>
)

const SharedSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 80.001 68.801"
        {...props}
    >
        <g
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
        >
            <path d="M24.755 10.918c7.78.277 13.867 6.809 13.59 14.594-.282 7.781-6.813 13.867-14.598 13.586-7.782-.277-13.863-6.809-13.586-14.594.277-7.781 6.808-13.863 14.594-13.586M55.802 0C48 0 41.7 6.3 41.7 14.102c0 7.801 6.3 14.102 14.102 14.102 7.8 0 14.102-6.3 14.102-14.102C69.9 6.297 63.603 0 55.802 0ZM78.603 57.898c.398 0 .699-.2 1-.398.3-.301.398-.7.398-1.102-1.3-13.602-11.699-24-24.199-24-7.898 0-15.102 4.2-19.699 11.102 5.7 3 10.2 8.102 12.801 14.398h29.699ZM0 67.199c0 .398.102.8.4 1.102.198.3.6.5 1 .5h45.698c.398 0 .8-.2 1-.5.3-.301.398-.7.398-1.102-.3-2.602-.8-5-1.699-7.3-.101-.102-.101-.2-.101-.302-2.5-6.601-7.301-11.699-13.102-14.398-.102 0-.102 0-.102-.101-2.898-1.3-5.898-2-9.199-2C11.801 43.199 1.301 53.598 0 67.2v-.001Z" />
        </g>
    </svg>
)

const WorldSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 88.928 88.928"
        {...props}
    >
        <g
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
        >
            <path d="M21.206 47.956c0-.229-.391-.418-.868-.418s-1.204-.271-1.616-.599c-.412-.332-.965-.332-1.229 0-.262.328-.154.599.24.599s.947.188 1.227.418c.281.23.9.42 1.378.42.478 0 .868-.189.868-.42ZM24.259 48.795c-.295-.231-.592-.581-.658-.778l-.599.359-.599.358c-.658.286-1.736.985-2.395 1.556h4.25a.54.54 0 0 0 .54-.538c0-.296-.242-.727-.539-.957ZM38.976 6.598c.285.012.453.052.191-.012a.285.285 0 0 0-.191.012ZM50.902 29.425v.031c-.376.56-.683 1.287-.683 1.617 0 .329.06.773.133.988.073.213.469.091.881-.271.41-.361.881-.74 1.046-.838.165-.1.3-.504.3-.898v-.24c0-.239-.42-.838-.539-1.076-.12-.24-.477-.719-.508-1.078l-.031-.358c-.23-.496-.66-.899-.953-.899h-.063c-.063 0-.122.659-.242.838l-.119.181c.199.593.549 1.48.778 1.975v.028ZM48.507 30.834l.3-.062c.296-.164.646-.689.778-1.166.132-.479.213-1.139.18-1.467l-.419.239c-.419.238-.839.359-.839.719 0 .359-.299 1.796 0 1.737ZM72.696 62.566c-.891 1.159-1.742 2.229-1.893 2.372-.152.143-.621.827-1.042 1.52l-.12.239-.119.239c.328.46.689.838.802.838.11 0 .343.027.515.06l.12-.06c.119-.061.239-.119.359-.42.119-.298.239-.359.3-.837.059-.479.897-1.858.958-2.097l.06-.239c.296-.987.755-2.417 1.018-3.173l-.479.779-.479.779Z" />
            <path d="M44.464 0C19.946 0 0 19.946 0 44.464c0 24.517 19.946 44.464 44.464 44.464 24.518 0 44.464-19.947 44.464-44.464C88.928 19.946 68.982 0 44.464 0Zm26.195 49.372c-.131.507-.724.326-1.316-.397l-.359-.599c-.359-.599-1.438-1.677-1.916-2.036l-.479-.359c-.066-1.449-.277-2.635-.471-2.635h.802c.411 0 1.017.378 1.345.838l.239.783c.24.783 1.677 2.092 1.917 3.249l.238 1.156ZM58.454 38.65c.201-.277.578-.505.838-.505s.902.146 1.429.326c.528.179.931.001.898-.395-.033-.396.129-.718.359-.718.23 0 .797.335 1.257.743.461.409 1.512.743 2.335.743s1.336.519 1.138 1.148l-.239.443-.239.444c-.856.236-2.042.431-2.635.431s-1.32-.028-1.616-.062c-.296-.032-.835.129-1.198.358-.361.231-.951.285-1.309.122-.358-.166-1.358-.893-2.223-1.617l-.12-.359c-.12-.359-1.916-.598-2.274-.719l-.36-.119c-1.118.065-2.305.335-2.634.599l-1.078.239c-1.078.239 1.078-1.437 1.678-1.609.598-.172.838-1.265 1.196-2.104l.359-.837c.855.461 1.772.837 2.036.837.263 0 .964.323 1.557.719l.358.599c.359.599-.239.359-.479.786l-.238.427c.459.323 1.002.359 1.204.08Zm5.74-4.165.358-.423.359-.424c.396.233.866.062 1.048-.383.181-.443.626-.267.987.393l.12.359.119.358c.725.329 1.156.757.959.953-.198.195-.791.355-1.318.353-.526-.002-1.146 0-1.377.004-.231.004-1.537-.192-1.735-.418-.197-.228.02-.573.48-.772Zm5.709-18.861c-.343.32-.646.454-.815.312-.215-.181-.619-.915-1.04-1.854a38.656 38.656 0 0 1 1.855 1.542Zm-29.921 5.708.024-.019.196-.147-.162.126c.072-.056.101-.08-.034.021a1.417 1.417 0 0 0-.082.07c.012-.009.024-.02.036-.028-.021.018-.035.028-.039.031.002 0 .002-.002.003-.003l-.071.056c.025-.023.104-.086.129-.107ZM6.029 46.227c.064.038.09.06-.005-.108-.023-.55-.037-1.1-.037-1.654v-.043c.235.616.51 1.298.73 1.799l.358.239c.358.24.575.455.839.721l.119.479c.121.478-.6.599 0 .957.6.359-.238-.358.6.359s1.316.598 1.676.838c.359.239.479-.719.838 0 .359.718-.719 0 .359.718l1.078.718c.329.197.652.036.719-.359l.717.719.72.72c.462.065.892.281.958.479l.599.479c.599.479 0-.241.599.479.598.719.841.88 1.138 1.077.296.198.646.359.778.359.131 0 .32.134.419.299.099.164.396.569.659.897.262.329.479.788.479 1.02 0 .229-.27.041-.599-.421v.838c0 .839.12.12 0 .839s.042.935.239 1.198c.197.262.359.668.359.896v.839c0 .231.323.797.719 1.257l.359.24c.358.24-.6-.6.358.24a82.134 82.134 0 0 1 1.616 1.436c.362.33.658.706.658.839s.377-.028.84-.359l.358.6.359.599c.264.328.479.707.479.839 0 .13.215-.192.479-.72l.239.959.239.957c-.131.264.084.749.479 1.077l.12.359c.12.358-.239.718 0 1.077l.239.358c.198.858.575 1.988.839 2.518.264.525.371 1.28.239 1.676l.24.359.239.357c.198.396-.019 1.042-.479 1.438l.839.838c.837.839.358 0 .837.839l.479.838c.053.119.125.262.212.413C17.1 75.457 6.747 62.076 6.029 46.227ZM44.464 82.94c-3.401 0-6.7-.444-9.843-1.276-.062-.339-.068-.646-.004-.837l-.359-.36c-.358-.359-.44-.494-.538-.658-.1-.165-.18-.487-.18-.719 0-.23.215-.688.479-1.019l-.479-.239c-.479-.239-.479.479-.479-.239s.27-.934.599-1.196l.24-.359c.238-.359-.12.479.238-.359l.359-.838c.133-.593.429-1.24.659-1.437.23-.199.419-.521.419-.719v-.778c0-.231-.055-.582-.119-.779l.119-.479.12-.479c-.066-.396.042-.827.239-.957l.359-.239.359-.24c.526-.462.688-.999.359-1.196l.598-.359c.6-.36.958-.719.839-1.198-.12-.479.119.719-.12-.479-.239-1.199-.359-1.079-.359-1.917 0-.838-.479-.12 0-.838l.479-.718c.395-.758.342-1.781-.12-2.275l-.359-.12c-.359-.119-.719-.359-1.316-.599l-.599-.239a56.99 56.99 0 0 1-2.515-.959l-.359-.119-.359-.119c-.659-.922-1.252-1.677-1.316-1.677l-1.078-.359c-1.078-.358-1.317-.478-1.677-.837l-.359-.359c-.526-.463-1.012-.975-1.077-1.139-.066-.164-.281-.138-.479.061l-1.077-.12-1.078-.121c-.527-.459-1.228-.837-1.557-.837l-.479.239-.479.239c-.462.33-1.027.652-1.259.718-.23.065-.769.095-1.196.061-.429-.034-1.021-.194-1.318-.358-.296-.165-.673-.596-.838-.957a7.017 7.017 0 0 1-.419-1.26l-.358-.239-.36-.238c-.526-.396-.851-1.042-.718-1.437.131-.396.023-.989-.239-1.316l-.479.239-.479.238c-.396.461-.881.946-1.078 1.078l-.359-.12a3.868 3.868 0 0 1-1.557-.958c-.6-.598-.719-1.196-.719-1.557v-.359c.396-.855 1.177-1.881 1.737-2.276.56-.395 1.287-.717 1.616-.717.33 0 .895-.135 1.258-.3.361-.164.955.078 1.316.539.361.462.9 1.136 1.197 1.497.296.362 1.132.281 1.856-.18l-.3-.359-.299-.359c-.264-.396-.211-1.15.12-1.677l.179-.359c.18-.357.42-.478.898-1.196l.958-1.438.239-.359c.526-.922 1.174-1.838 1.437-2.036a5.76 5.76 0 0 0 .897-.897c.231-.296.555-.674.72-.838.165-.166.515-.299.778-.299s.855-.19 1.316-.421c.461-.229 1.081-.417 1.377-.417.297 0 .324-.271.061-.6-.264-.33-.613-.761-.779-.959-.164-.196.213-.573.839-.837.626-.263 1.892-.91 2.813-1.438l-.119.359-.12.358c-.724.922-1.101 1.839-.838 2.036.263.197.964.468 1.558.601l.238-.361.239-.359c.066-.461.039-1.178-.06-1.596-.098-.418-.18-1.262-.18-1.876v-.599c0-.599-.238-2.154-.6-1.915l-.358.239c-.198-.725-.358-1.695-.358-2.156 0-.46-.297-.568-.659-.24-.362.331-1.089.545-1.616.479l.119-.359.12-.359c.329-.197.303-.602-.06-.896-.363-.298-1.305-.972-2.096-1.497l-.239.358-.239.358a30.926 30.926 0 0 1-.658 1.618c-.166.362-.3.847-.3 1.077 0 .231-.108.688-.239 1.018-.132.329-.563.923-.959 1.317-.395.396-.879 1.041-1.077 1.437-.198.396-.468-.089-.599-1.077v-.717c-.856-.79-1.638-1.761-1.736-2.156-.1-.395.035-1.149.299-1.677v-.358c0-.359.6-1.078 1.078-1.557.479-.479 1.677-1.438 2.035-1.676l.359-.241c.461-.263.785-.021.719.539-.066.56.23.964.658.898.428-.067.725-.36.659-.659-.065-.296.177-.699.538-.898.362-.196.82-.788 1.018-1.316a83.72 83.72 0 0 1 1.078-2.635l.359.24.359.239c.461.593.541 1.67.18 2.396-.363.725-.901 1.318-1.197 1.318-.297 0-.62.242-.719.536-.099.298.09.594.419.661l.479.358.479.358c.461.526 1.161.715 1.557.42.396-.297.719-.755.719-1.019 0-.264.242-.478.539-.478.296 0 .7-.352.898-.78.197-.427.305-1.02.238-1.316a5.297 5.297 0 0 1-.119-.899l.119-.479c.12-.479.012-.672-.119-.908-.132-.239-.239-.695-.239-1.019v-1.066c0-.263-.161-.776-.359-1.138-.197-.361-.871-.658-1.497-.658-.625 0-1.973-.404-2.994-.898-.753-.363-1.522-.68-1.979-.82a38.343 38.343 0 0 1 6.323-2.82c.098.379.221.719.356.947.313.525.866 1.011 1.228 1.076l.479-.118c.479-.12 1.438-1.317 1.678-1.677.239-.359 1.914-1.316 2.395-1.556l.217-.108c.301 0 .602-.014.666-.03l.074.019.262.063c-.249-.028-.649.315-.888.766l-.812.608-.957.717c-.264.688-.264 1.658 0 2.154l.359.601.359.599c.065.329.119.705.119.838v.36c0 .358-.119 1.436-.119 1.795 0 .358-.719 2.274-.719 2.634 0 .36-.211 1.33-.468 2.517l-.724.478c-.724.48-.115.839 0 1.438.114.599-.834.479 0 1.197.832.718.474 0 .832.718.359.718.12.239.838 0l.674-.225a166.692 166.692 0 0 0 1.924-2.397c.016-.015.032-.026.055-.044l.016-.015c.006-.003.12-.089.273-.208l.293-.224c1.557-1.199.598-.6 1.557-1.199.957-.599-.24-.239.957-.599l1.197-.358c.791-.395 1.867-1.364 2.396-2.155l.119-.359c.12-.358.359-.358 0-.839-.359-.478-.837.719-.359-.478.479-1.197.261-1.197.549-1.676.29-.48-.528.239 0-1.079l.528-1.318c.198-.328.037-.813-.358-1.076l.718-.479c.719-.479.908-.748 1.139-1.077.229-.33.149-.869-.18-1.196l.599-.359c.485-.292.499.059.678-.315a38.243 38.243 0 0 1 16.032 6.24c.086.252.156.488.078.661l-.216.479c.118.396.959 1.311 1.868 2.034l.543.24.256.111c.388.476.689.888.672.915-.02.028-.083.104-.144.17l-.784.359-.783.358c-.777.396-2.07.937-2.874 1.198l-.119-.478-.12-.479c-.592-.132-1.293-.455-1.557-.719l-.599-.24-.599-.239c-.395-.329-1.203-.76-1.796-.957l-.479.479c-.479.479-1.917.838-2.155 1.677-.24.839-.6 1.676-.719 2.155-.12.48-1.557 2.275-2.036 2.754-.479.479-1.077 1.437-.718 1.916.358.479 1.316 1.678 1.676 1.437.359-.239.737.03 1.197.36.461.328 1.459-.731 2.218-2.354l-.091-.021c-.091-.021-.539-1.696.045-2.056.583-.359.941-2.154 1.301-1.795l.359.358c-.461 1.448-.38 2.827.18 3.062.561.236 1.664.116 2.455-.267l-.599.697c-.6.698-1.677 1.416-1.797 1.775l-.12.359c-1.004 1.12-2.168 2.035-2.588 2.035-.42 0-1.357-.215-2.081-.478l-.839.478-.838.48c-.922.921-1.676 2.055-1.676 2.515 0 .46-.539.515-1.198.119l-.239.719-.239.718c.132.491.348 1.124.479 1.405.132.279.134.714.005.964l-.9.132c-.9.134-1.14-.72-1.379.006l-.24.726c.132.594.216 1.387.188 1.764-.029.378.209-.152.531-1.177l-.119 1.861c-.12 1.864.838.308-.12 1.864s0 .358-.958 1.557c-.959 1.196-.959 1.685-1.677 2.697-.718 1.014-.942 2.092-1.368 2.39-.428.302.067.541 0 1.02l-.068.479c.037.79.469 2.244.958 3.232l.239.359c.239.359.359.719.838 1.318.479.599.965.438 1.557.239l.359.359c.359.359.951.359 1.677.359h.358c.36 0 .6.238.959 0l.359-.239c.525-.198 1.28-.201 1.676-.008.396.194.988.464 1.317.599.329.136.49 1.216.359 2.4l.358.479c.359.479 1.197 1.677 1.557 1.677h.36c.313.263.569.99.569 1.616 0 .626-.128 1.435-.285 1.797-.156.363-.312.819-.345 1.017-.032.198-.167.899-.3 1.558l.24.719c.239.719.371 2.395.784 2.754l.413.359c.131.658.455 1.656.719 2.216.264.56 1.449.694 2.635.299l.718-.241c.718-.238 1.316-.837 1.796-2.034.479-1.197.527-2.514.982-2.874.455-.358 1.053-.957 1.532-1.557.479-.601 1.558-2.036 1.677-2.515l.119-.479c-.197-1.646-.467-3.372-.599-3.833l.479-.479c.479-.479 2.035-2.154 2.275-2.634.238-.479 1.795-2.395 1.915-2.754.12-.359.359-2.036 0-1.796l-.358.238c-.791.396-1.922.02-2.516-.837l.479.118c.479.121 2.395-.277 3.472-1.038l1.078-.757c.791-.921 1.438-2.093 1.438-2.603 0-.509-.27-1.115-.599-1.351l-.358-.118-.361-.121c-.592-.065-1.293-.307-1.556-.537-.263-.23-1.556-1.12-2.874-1.977l.838.121.839.118c1.778.725 4.149 1.372 5.269 1.438l.359-.12c.358-.119 2.395 1.326 2.754 1.621.281.231.932 1.165 1.429 1.874C81.634 66.953 64.882 82.94 44.464 82.94Z" />
        </g>
    </svg>
)

const SearchSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 98.969 99.108"
        {...props}
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            stroke={props.fillcolor ?? 'rgb(6, 251, 253)'}
            strokeLinecap="butt"
            strokeWidth={1}
            d="M93.62 87.35 69.33 63.06A35.44 35.44 0 0 0 77 41C77 21.118 60.882 5 41 5S5 21.118 5 41s16.118 36 36 36a35.44 35.44 0 0 0 22-7.65l24.32 24.3a4.35 4.35 0 0 0 6.3 0 4.35 4.35 0 0 0 0-6.3ZM41 68c-14.912 0-27-12.088-27-27s12.088-27 27-27 27 12.088 27 27c-.038 14.896-12.104 26.962-27 27Z"
        />
    </svg>
)

const MemorySVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 100 100.287"
        {...props}
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            stroke={props.fillcolor ?? 'rgb(6, 251, 253)'}
            strokeLinecap="butt"
            strokeWidth={1}
            d="M6.778 49.878c0 5.172 2.509 9.937 6.598 12.88a14.835 14.835 0 0 0-1.149 5.749c0 7.658 5.803 13.986 13.242 14.818C26.884 89.986 32.813 95 39.887 95c3.86 0 7.354-1.062 10.113-3.035C52.76 93.938 56.253 95 60.113 95c7.074 0 13.003-5.014 14.417-11.675 7.439-.832 13.242-7.16 13.242-14.818 0-1.999-.392-3.942-1.149-5.749a15.867 15.867 0 0 0 6.598-12.88c0-5.51-2.862-10.544-7.386-13.409a14.851 14.851 0 0 0 1.054-5.514c0-7.83-6.069-14.271-13.749-14.865C71.447 9.679 65.602 5 58.726 5A14.953 14.953 0 0 0 50 7.822 14.953 14.953 0 0 0 41.274 5c-6.876 0-12.721 4.679-14.415 11.09-7.68.595-13.749 7.035-13.749 14.865 0 1.911.359 3.773 1.054 5.514a15.893 15.893 0 0 0-7.386 13.409Zm45.431 5.468c.663.021 1.419.035 2.205.035 1.139 0 2.333-.033 3.392-.125.364 1.412.897 2.713 1.602 3.683.432.595 1.105.91 1.789.91a2.209 2.209 0 0 0 1.785-3.508c-1.292-1.777-1.663-6.484-1.084-7.926a2.21 2.21 0 1 0-4.101-1.644c-.409 1.021-.598 2.496-.573 4.105-1.384.099-3.302.098-5.014.047V12.85a9.638 9.638 0 0 1 6.517-2.548c4.45 0 8.229 3.04 9.302 7.196a14.008 14.008 0 0 0-6.778 4.422 2.208 2.208 0 0 0 3.378 2.847 9.595 9.595 0 0 1 6.161-3.344l.002-.001c.207-.025.407-.044.603-.057h.004c.197-.013.389-.019.581-.019 5.298 0 9.609 4.31 9.609 9.608a9.536 9.536 0 0 1-1.012 4.292 14.94 14.94 0 0 0-9.825 1.186 14.97 14.97 0 0 0-4.759-2.899 2.208 2.208 0 1 0-1.554 4.136c3.644 1.369 6.297 4.752 6.758 8.619a2.21 2.21 0 0 0 4.387-.525 14.978 14.978 0 0 0-1.934-5.783 10.562 10.562 0 0 1 7.917.209l.169.077a9.707 9.707 0 0 1 .742.374c.158.088.313.181.465.275.083.053.167.105.249.16.157.104.311.211.461.323.088.066.175.136.261.204a11.243 11.243 0 0 1 .53.446c.143.13.282.264.418.4.068.069.134.141.201.211.109.117.216.236.32.358.049.057.1.113.147.172a11.548 11.548 0 0 1 .878 1.244l.018.031c.125.209.242.422.352.64l.035.067c.114.229.221.463.319.701l.007.018c.1.244.191.493.273.746v.002c.08.247.15.499.212.754l.015.069c.06.25.111.504.152.76v.001a10.874 10.874 0 0 1 .1.902c.019.248.03.498.03.75 0 4.208-2.495 8.012-6.355 9.692l-2.517 1.095 1.607 2.225a9.536 9.536 0 0 1 1.816 5.617c0 4.988-3.82 9.099-8.687 9.564a13.885 13.885 0 0 0-4.795-8.438 13.698 13.698 0 0 0 2.111-5.2 2.21 2.21 0 1 0-4.35-.775c-.667 3.747-3.62 6.789-7.347 7.567a2.209 2.209 0 0 0 .904 4.325 13.756 13.756 0 0 0 5.681-2.667 9.452 9.452 0 0 1 3.561 7.377v.008c-.004 5.199-4.237 9.429-9.436 9.429-3.185 0-5.957-.973-7.904-2.755V55.346h-.001ZM12.11 49.128l.011-.155c.022-.251.05-.5.089-.747v-.001c.041-.256.092-.51.152-.76l.015-.069c.063-.255.132-.507.212-.754v-.002a11.235 11.235 0 0 1 .279-.765 11.037 11.037 0 0 1 .706-1.407l.018-.031a10.404 10.404 0 0 1 .496-.745c.123-.17.25-.336.382-.499.048-.059.098-.115.147-.172.104-.122.21-.241.32-.358.066-.07.133-.142.201-.211a10.508 10.508 0 0 1 .948-.846c.086-.068.173-.138.261-.204.15-.112.304-.22.461-.323.082-.055.166-.107.249-.16.153-.095.308-.188.465-.275.07-.039.14-.076.21-.113.174-.092.351-.179.532-.261.056-.026.113-.053.17-.077a10.503 10.503 0 0 1 4.211-.878c3.357 0 6.233 1.565 8.141 4.354a14.95 14.95 0 0 0-4.892 4.455 2.208 2.208 0 1 0 3.623 2.527c2.227-3.192 6.158-4.925 10.016-4.418a2.209 2.209 0 1 0 .578-4.38 15.025 15.025 0 0 0-5.121.204c-2.682-4.513-7.182-7.161-12.346-7.161-1.106 0-2.184.124-3.222.353a9.536 9.536 0 0 1-1.012-4.292c0-5.299 4.311-9.608 9.609-9.608.383 0 .772.024 1.188.075l2.341.288.134-2.355c.288-5.076 4.501-9.053 9.591-9.053 2.417 0 4.75.92 6.517 2.548v14.83c-1.133.694-2.853.938-4.643.606-2.531-.47-4.542-1.9-5.379-3.83a2.21 2.21 0 0 0-4.053 1.759c1.423 3.279 4.648 5.678 8.626 6.415.822.152 1.633.227 2.419.227 1.064 0 2.083-.14 3.029-.405v54.492c-1.947 1.782-4.72 2.755-7.904 2.755-5.194 0-9.424-4.223-9.435-9.416l.002-.02c0-2.454.924-4.579 2.675-6.146 1.733-1.552 4.134-2.406 6.76-2.406a2.209 2.209 0 1 0 0-4.418c-1.305 0-2.576.159-3.787.458a13.878 13.878 0 0 0-1.305-7.415 2.21 2.21 0 0 0-3.975 1.93 9.489 9.489 0 0 1 .142 7.918 12.67 12.67 0 0 0-.783.643c-2.133 1.909-3.499 4.43-3.964 7.246-4.869-.465-8.688-4.576-8.688-9.564 0-2.03.628-3.973 1.816-5.617l1.607-2.225-2.517-1.095a10.568 10.568 0 0 1-6.355-9.692c.002-.256.013-.506.032-.754Z"
        />
    </svg>
)

const HomeSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        viewBox="0 0 88.898 72.187"
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        {...props}
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            stroke={props.fillcolor ?? 'rgb(6, 251, 253)'}
            strokeWidth={props.strokeWidth ?? 4}
            d="m39.045 5.554-32.25 18.56c-.96.55-1.289 1.769-.738 2.73.55.96 1.77 1.289 2.73.738l3-1.73v32.327c0 5.57 4.531 10.11 10.11 10.11h46.43c5.57 0 10.108-4.532 10.108-10.11V25.855l3 1.73a2.002 2.002 0 0 0 2.739-.73 2 2 0 0 0-.739-2.73L51.205 5.574a11.93 11.93 0 0 0-12.16-.02Zm14.07 58.73h-16v-16.91a2.279 2.279 0 0 1 2.281-2.281h11.43a2.279 2.279 0 0 1 2.282 2.281l-.004 16.91h.011Zm21.32-40.44V58.17a6.113 6.113 0 0 1-6.11 6.11l-11.21.003v-16.91c0-3.46-2.82-6.28-6.282-6.28H39.395a6.292 6.292 0 0 0-6.28 6.28v16.91H21.902a6.113 6.113 0 0 1-6.11-6.109V23.843c0-.102-.019-.191-.03-.281l25.3-14.56a7.953 7.953 0 0 1 8.122.012l25.28 14.54c-.011.109-.03.199-.03.289Z"
        />
    </svg>
)

const ExploreSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 41.666 41.668"
        {...props}
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            d="M25.15 17.563a1.833 1.833 0 0 0-1.04-1.041l-8.606-3.479a1.87 1.87 0 0 0-2.057.4 1.87 1.87 0 0 0-.4 2.057l3.479 8.604v.002c.185.476.564.855 1.04 1.04l8.604 3.479h.002a1.87 1.87 0 0 0 2.057-.4c.54-.54.699-1.354.4-2.057l-3.479-8.605ZM22.505 22.5a2.353 2.353 0 1 1 0-3.332c.45.437.701 1.039.701 1.666s-.252 1.228-.701 1.666ZM35.566 6.104v.002A20.836 20.836 0 0 0 20.836 0 20.838 20.838 0 0 0 0 20.834a20.835 20.835 0 0 0 35.566 14.729 20.83 20.83 0 0 0 0-29.458v-.001ZM32.9 32.897a17.034 17.034 0 0 1-12.048 4.978A17.037 17.037 0 0 1 3.82 20.834 17.045 17.045 0 0 1 20.852 3.793 17.035 17.035 0 0 1 32.9 8.77a17.085 17.085 0 0 1 0 24.125Z"
        />
    </svg>
)

const AddSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 41.666 41.668"
        {...props}
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            d="M70.754 47.168H52.832V29.246a1.89 1.89 0 0 0-1.887-1.887h-1.89c-1.04 0-1.887.844-1.887 1.887v17.922H29.246a1.888 1.888 0 0 0-1.887 1.887v1.89a1.89 1.89 0 0 0 1.887 1.887h17.922v17.926-.004a1.89 1.89 0 0 0 1.887 1.887h1.89a1.89 1.89 0 0 0 1.887-1.887V52.832h17.926-.004a1.89 1.89 0 0 0 1.887-1.887v-1.89a1.89 1.89 0 0 0-1.887-1.887z"
        />
    </svg>
)

const EyeSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 24 24"
        {...props}
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            d="M3 12s2.25-5.5 9-5.5 9 5.5 9 5.5-2.25 5.5-9 5.5S3 12 3 12Zm9 3.25a3.25 3.25 0 1 0 0-6.5 3.25 3.25 0 0 0 0 6.5Z"
        />
    </svg>
)

const HideEyeSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 24 24"
        {...props}
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            fillRule="evenodd"
            d="M4.282 3.918a.5.5 0 0 0-.705.047l-.659.753a.5.5 0 0 0 .047.705l3.22 2.818C3.88 9.852 3 12 3 12s2.25 5.5 9 5.5c1.537 0 2.84-.285 3.938-.726l3.78 3.308a.5.5 0 0 0 .705-.047l.659-.753a.5.5 0 0 0-.047-.705L4.282 3.918ZM13.67 14.79l-4.655-4.073a3.25 3.25 0 0 0 4.655 4.074ZM15.25 12c0 .164-.012.326-.036.484l3.212 2.81C20.278 13.764 21 12 21 12s-2.25-5.5-9-5.5c-1.172 0-2.209.166-3.121.44l2.215 1.938A3.25 3.25 0 0 1 15.25 12Z"
            clipRule="evenodd"
        />
    </svg>
)

const CheckSVG = (props: ExtendSVGProps) => (
    <svg
        {...props}
        xmlns="http://www.w3.org/2000/svg"
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        // fill={props.fillcolor}
        className={props.fillcolor}
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        viewBox="0 0 100 125"
    >
        <path
            // fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            className="fill-current"
            transform="translate(0 -952.362)"
            d="M70.884 982.338a5 5 0 0 0-3.437 1.531c-9.578 9.598-16.893 17.615-25.782 26.688l-9.468-8a5.001 5.001 0 1 0-6.438 7.656l13 11a5 5 0 0 0 6.75-.281c10.77-10.794 18.437-19.414 29-30a5 5 0 0 0-3.625-8.594z"
        />
    </svg>
)

const AddImageSVG = (props: ExtendSVGProps) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlSpace="preserve"
        strokeMiterlimit={10}
        style={{
            fillRule: "nonzero",
            clipRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
        }}
        width={props.width ?? '100%'}
        height={props.height ?? '100%'}
        viewBox="0 0 24 24"
        className={props.fillcolor}
        {...props}
    >
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            fillRule="evenodd"
            d="M10.236 4.5a1.5 1.5 0 0 0-1.342.83l-.394.788A2.5 2.5 0 0 1 6.264 7.5H5A1.5 1.5 0 0 0 3.5 9v9A1.5 1.5 0 0 0 5 19.5h14a1.5 1.5 0 0 0 1.5-1.5V8.5h1V18a2.5 2.5 0 0 1-2.5 2.5H5A2.5 2.5 0 0 1 2.5 18V9A2.5 2.5 0 0 1 5 6.5h1.264a1.5 1.5 0 0 0 1.342-.83L8 4.883A2.5 2.5 0 0 1 10.236 3.5H13v1h-2.764Z"
            clipRule="evenodd"
        />
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            fillRule="evenodd"
            d="M12 9.5a3.5 3.5 0 1 0 0 7 3.5 3.5 0 0 0 0-7ZM7.5 13a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM21 5h-5V4h5v1Z"
            clipRule="evenodd"
        />
        <path
            fill={props.fillcolor ?? 'rgb(6, 251, 253)'}
            fillRule="evenodd"
            d="M19 2v5h-1V2h1Z"
            clipRule="evenodd"
        />
    </svg>
)

const AnimatedCheckmark = (props: ExtendSVGProps) => (
    <div className="inline-block" style={{ width: props.width, height: props.height ?? props.width }}>
        <svg
            className={`w-full h-full rounded-full block animate-checkmark-fill animate-checkmark-scale`}
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 52 52"
            style={{ stroke: props.fillcolor, boxShadow: `inset 0px 0px 0px ${props.fillcolor}` }}
        >
            <circle
                className="animate-checkmark-circle"
                cx="26"
                cy="26"
                r="25"
                fill="none"
                strokeWidth="2"
                strokeMiterlimit="10"
            />
            <path
                className="animate-checkmark-check"
                fill="none"
                strokeWidth="2"
                d="M14.1 27.2l7.1 7.2 16.7-16.8"
            />
        </svg>
    </div>
)

export {
    MemorySVG, ExploreSVG, HomeSVG, SearchSVG, WorldSVG, SharedSVG, PrivateSVG, AccountSVG, HamburgerSVG,
    PlaySVG, PauseSVG, FullScreenSVG, SettingsSVG, MinScreenSVG, EyeSVG, HideEyeSVG, CheckSVG, AddImageSVG,
    AnimatedCheckmark, AddSVG
}

================
File: src/components/Marketing/splash-page.tsx
================
import { ArrowRight, Code, BookText, Sparkles, Github } from "lucide-react";
import { Button } from "@/components/ui/button";
import Image from "next/image";

export default function SplashPage() {
    return (
        <div className="flex flex-col min-h-screen">
            {/* Navigation */}
            <header className="fixed top-0 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
                <div className="container flex h-14 items-center">
                    <div className="flex flex-1 items-center justify-between">
                        <div className="flex items-center space-x-2">
                            {/* <BookText className="h-6 w-6" /> */}
                            <Image src={'/CoLabPaper.svg'} alt="CoLabPaper Icon" width={30} height={30} />
                            <span className="font-bold">CoLabPaper</span>
                        </div>
                        <div className="flex items-center space-x-4">
                            <Button variant="ghost" asChild>
                                <a href="/signin">Sign In</a>
                            </Button>
                            <Button asChild>
                                <a href="/signup">Get Started</a>
                            </Button>
                        </div>
                    </div>
                </div>
            </header>

            {/* Hero Section */}
            <section className="container flex flex-col items-center justify-center gap-4 pt-32 pb-8 md:pt-40 text-center">
                <h1 className="text-3xl sm:text-5xl md:text-6xl lg:text-7xl font-bold">
                    Write Research Papers <br />
                    <span className="text-primary">Powered by AI</span>
                </h1>
                <p className="max-w-[42rem] text-muted-foreground sm:text-xl sm:leading-8">
                    Seamlessly integrate references, code, and AI-generated content.
                    Write faster and smarter with intelligent assistance.
                </p>
                <div className="flex gap-4">
                    <Button size="lg" asChild>
                        <a href="/signup">
                            Get Started <ArrowRight className="ml-2 h-4 w-4" />
                        </a>
                    </Button>
                    <Button size="lg" variant="outline">
                        <a href="https://github.com/yourusername/colabpaper" target="_blank" rel="noopener noreferrer" className="flex flex-row justify-center items-center align-middle">
                            <div className="mr-2 h-6 w-6 flex flex-row justify-center align-middle items-center rounded-full border border-primary">
                                <Github className="h-4 w-4 text-primary" />
                            </div>
                            <span className="text-primary">Star on GitHub</span>
                        </a>
                    </Button>
                </div>
            </section>

            {/* Features Section */}
            <section className="container py-16">
                <div className="grid grid-cols-1 gap-8 md:grid-cols-3">
                    <div className="flex flex-col items-center text-center">
                        <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-primary">
                            <Code className="h-6 w-6 text-primary-foreground" />
                        </div>
                        <h3 className="mt-4 text-xl font-semibold">Code Integration</h3>
                        <p className="mt-2 text-muted-foreground">
                            Seamlessly include code from GitHub repositories with automatic syntax highlighting.
                        </p>
                    </div>
                    <div className="flex flex-col items-center text-center">
                        <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-primary">
                            <BookText className="h-6 w-6 text-primary-foreground" />
                        </div>
                        <h3 className="mt-4 text-xl font-semibold">Reference Management</h3>
                        <p className="mt-2 text-muted-foreground">
                            Import and manage references with ease. Automatic citation formatting in any style.
                        </p>
                    </div>
                    <div className="flex flex-col items-center text-center">
                        <div className="flex h-12 w-12 items-center justify-center rounded-lg bg-primary">
                            <Sparkles className="h-6 w-6 text-primary-foreground" />
                        </div>
                        <h3 className="mt-4 text-xl font-semibold">AI Writing Assistant</h3>
                        <p className="mt-2 text-muted-foreground">
                            Generate sections, improve writing, and get intelligent suggestions as you write.
                        </p>
                    </div>
                </div>
            </section>

            {/* Footer */}
            <footer className="border-t mt-auto">
                <div className="container flex h-14 items-center">
                    <p className="text-sm text-muted-foreground">
                        Built with ❤️ by researchers, for researchers.
                    </p>
                </div>
            </footer>
        </div>
    );
}

================
File: src/components/ui/button/google-auth.tsx
================
// src/components/ui/button/google-auth.tsx
'use client'

import React from 'react'
import { Button } from '@/components/ui/button/index'
import Image from 'next/image'

const GoogleAuthButton = () => {
    const signupWithGoogle = async () => {
        const response = await fetch(`/api/${process.env.NEXT_PUBLIC_API_VERSION}/auth/social/google`, {
            method: 'POST',
        })

        if (!response.ok) {
            console.error('Error signing in with Google')
            // TODO: Handle error appropriately
            return
        }

        const data = await response.json()

        if (data.url) {
            window.location.href = data.url
        }
    }

    return (
        <Button
            onClick={signupWithGoogle}
            className="w-full bg-background hover:bg-muted text-foreground rounded-md px-4 py-6 mb-2 border border-input flex flex-row justify-start align-middle items-center"
        >
            <div className='mr-[15px]'>
                <Image
                    src={'icons/social/google-logo.svg'}
                    width={30}
                    height={30}
                    alt="google-logo"
                    className="pr-2"
                />
            </div>
            <span className='text-lg'>Continue with Google</span>
        </Button>
    )
}

export default GoogleAuthButton

================
File: src/components/ui/button/index.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/utils/styleHelpers"

const buttonVariants = cva(
    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
    {
        variants: {
            variant: {
                default: "bg-primary text-primary-foreground hover:bg-primary/90",
                destructive:
                    "bg-destructive text-destructive-foreground hover:bg-destructive/90",
                outline:
                    "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
                secondary:
                    "bg-secondary text-secondary-foreground hover:bg-secondary/80",
                ghost: "hover:bg-accent hover:text-accent-foreground",
                link: "text-primary underline-offset-4 hover:underline",
            },
            size: {
                default: "h-10 px-4 py-2",
                sm: "h-9 rounded-md px-3",
                lg: "h-11 rounded-md px-8",
                icon: "h-10 w-10",
            },
        },
        defaultVariants: {
            variant: "default",
            size: "default",
        },
    }
)

export interface ButtonProps
    extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
    asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
    ({ className, variant, size, asChild = false, ...props }, ref) => {
        const Comp = asChild ? Slot : "button"
        return (
            <Comp
                className={cn(buttonVariants({ variant, size, className }))}
                ref={ref}
                {...props}
            />
        )
    }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/button/submit.tsx
================
"use client"

import { useFormStatus } from "react-dom"
import { type ComponentProps } from "react"
import { Button } from "@/components/ui/button/index"

type Props = ComponentProps<typeof Button> & {
    pendingText?: string;
};

export function SubmitButton({ children, pendingText, ...props }: Props) {
    const { pending, action } = useFormStatus()

    const isPending = pending && action === props.formAction

    return (
        <Button {...props} type="submit" disabled={isPending}>
            {isPending ? pendingText : children}
        </Button>
    )
}

================
File: src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/utils/styleHelpers"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: src/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/utils/styleHelpers"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/utils/styleHelpers"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/utils/styleHelpers"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/utils/styleHelpers"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/utils/styleHelpers"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/resizable.tsx
================
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/utils/styleHelpers"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: src/components/ui/search.tsx
================
'use client'
import React, { ChangeEvent, useRef, useState } from 'react';
import Image from 'next/image';
import { Input } from './input';

interface SearchProps {
    searchText: string
    onSearchChange: (value: string) => void;
}

const Search = (props: SearchProps) => {
    return (
        <div className="input input-md container-inset-sm input-bordered w-auto max-w-xs h-10 ">
            <div
                className="flex flex-row h-full border border-solid border-zinc-400 rounded-sm focus-within:ring-2 focus-within:ring-blue-500"
                tabIndex={0}
            >
                <Image
                    src="/search.svg"
                    width={18}
                    height={18}
                    alt="Search Icon"
                    className="mx-2"
                />
                <input
                    type="text"
                    placeholder="Search Projects"
                    className="w-full bg-transparent focus:outline-none"
                    value={props.searchText}
                    onChange={(e: ChangeEvent<HTMLInputElement>) => props.onSearchChange(e.target.value)}
                />
            </div>
        </div>
    );
};

export default Search;

================
File: src/components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/utils/styleHelpers"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: src/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/utils/styleHelpers"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: src/components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/utils/styleHelpers"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/utils/styleHelpers"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.tsx
================
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "./toast"
import { useToast } from "./use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "./toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
    type: ActionType["ADD_TOAST"]
    toast: ToasterToast
  }
  | {
    type: ActionType["UPDATE_TOAST"]
    toast: Partial<ToasterToast>
  }
  | {
    type: ActionType["DISMISS_TOAST"]
    toastId?: ToasterToast["id"]
  }
  | {
    type: ActionType["REMOVE_TOAST"]
    toastId?: ToasterToast["id"]
  }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
              ...t,
              open: false,
            }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: src/config/upload.ts
================
export const UPLOAD_CONFIG = {
    MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB
    ALLOWED_FILE_TYPES: [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'application/pdf', // For vector graphics
    ] as const,
    MAX_FILE_SIZE_MB: 10,
} as const;

export type AllowedFileType = (typeof UPLOAD_CONFIG.ALLOWED_FILE_TYPES)[number];
export type FileTypes = ReadonlyArray<string>;

export function isAllowedFileType(type: string, allowedTypes: FileTypes): boolean {
    return allowedTypes.includes(type);
}

================
File: src/shared/actions/auth.ts
================
'use server'
import { createClient } from '@/utils/supabase/server'
import { redirect } from 'next/navigation'

export async function signOut(): Promise<void> {
    const supabase = await createClient()
    await supabase.auth.signOut()
    redirect('/')
}

================
File: src/shared/constants/index.ts
================
import { LATEX_FILE_TYPES } from "./latex.constants";
import { SIGNIN_RETURN_TYPES, SIGNUP_RETURN_TYPES } from "./login.constants";
export {
    // Latex Types
    LATEX_FILE_TYPES,
    // Login Types
    SIGNIN_RETURN_TYPES,
    SIGNUP_RETURN_TYPES,
}

================
File: src/shared/constants/latex.constants.ts
================
import { FileTypeKey, LatexFileType } from "@/types";

export const LATEX_FILE_TYPES: Record<FileTypeKey, LatexFileType> = {
    'tex': {
        extension: '.tex',
        description: 'LaTeX Document',
        category: 'main'
    },
    'cls': {
        extension: '.cls',
        description: 'Document Class',
        category: 'style'
    },
    'sty': {
        extension: '.sty',
        description: 'Style Package',
        category: 'style'
    },
    'bib': {
        extension: '.bib',
        description: 'Bibliography Database',
        category: 'bibliography'
    },
    'bst': {
        extension: '.bst',
        description: 'Bibliography Style',
        category: 'bibliography'
    },
    'dtx': {
        extension: '.dtx',
        description: 'Documented LaTeX Source',
        category: 'packages'
    },
    'ins': {
        extension: '.ins',
        description: 'Installation File',
        category: 'packages'
    }
};

================
File: src/shared/constants/login.constants.ts
================
export enum SIGNUP_RETURN_TYPES {
    ERROR = 'ERROR',
    ALREAD_REGISTERED_ERROR = 'ALREADY_REGISTERED',
    CONFIRM_EMAIL = 'CONFIRM_EMAIL'
}

export enum SIGNIN_RETURN_TYPES {
    ERROR = 'ERROR',
    INVALID_CREDENTIALS = 'INVALID_CREDENTIALS',
    SUCCESS = 'SUCCESS'
}

================
File: src/shared/context/ProjectContext.tsx
================
'use client';

import React, { createContext, useContext, useState, useEffect } from 'react';
import { Project } from '@/types/database.types';
import { useToast } from '@/components/ui/use-toast';

interface ProjectContextType {
    project: Project | null;
    setProject: (project: Project) => void;
    isLoading: boolean;
    error: string | null;
    refreshProject: () => Promise<void>;
}

const ProjectContext = createContext<ProjectContextType | undefined>(undefined);

export function ProjectProvider({
    children,
    projectId
}: {
    children: React.ReactNode;
    projectId: string;
}) {
    const [project, setProject] = useState<Project | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const { toast } = useToast();

    const fetchProject = async () => {
        try {
            setIsLoading(true);
            const response = await fetch(`/api/v1/projects/${projectId}`);
            if (!response.ok) throw new Error('Failed to fetch project details');

            const { data } = await response.json();
            setProject(data);
            setError(null);
        } catch (error) {
            const message = error instanceof Error ? error.message : 'Failed to load project';
            setError(message);
            toast({
                title: "Error",
                description: message,
                variant: "destructive",
            });
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchProject();
    }, [projectId]);

    return (
        <ProjectContext.Provider
            value={{
                project,
                setProject,
                isLoading,
                error,
                refreshProject: fetchProject
            }}
        >
            {children}
        </ProjectContext.Provider>
    );
}

export function useProject() {
    const context = useContext(ProjectContext);
    if (context === undefined) {
        throw new Error('useProject must be used within a ProjectProvider');
    }
    return context;
}

================
File: src/shared/context/ThemeContext.tsx
================
'use client';

import * as React from 'react';
import { ThemeProvider as NextThemesProvider } from 'next-themes';
import type { ThemeProviderProps } from 'next-themes';

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}

================
File: src/shared/hooks/useImageUpload.ts
================
// src/hooks/useImageUpload.ts
import { useState, useCallback } from 'react';
import { UPLOAD_CONFIG, FileTypes, isAllowedFileType } from '@/config/upload';

interface UploadedImage {
    file_path: string;
    url: string;
    file_type: string;
    size: number;
}

interface UseImageUploadOptions {
    projectId: string;
    onUploadSuccess?: (image: UploadedImage) => void;
    maxSizeMB?: number;
    allowedTypes?: FileTypes;
}

export function useImageUpload({
    projectId,
    onUploadSuccess,
    maxSizeMB = UPLOAD_CONFIG.MAX_FILE_SIZE_MB,
    allowedTypes = UPLOAD_CONFIG.ALLOWED_FILE_TYPES,
}: UseImageUploadOptions) {
    const [uploadedImages, setUploadedImages] = useState<UploadedImage[]>([]);
    const [isUploading, setIsUploading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const validateFile = useCallback((file: File): boolean => {
        // Check file type
        if (!isAllowedFileType(file.type, allowedTypes)) {
            setError(`Unsupported file type. Allowed types: ${allowedTypes.join(', ')}`);
            return false;
        }

        // Check file size
        const maxSize = maxSizeMB * 1024 * 1024;
        if (file.size > maxSize) {
            setError(`File too large. Maximum size: ${maxSizeMB}MB`);
            return false;
        }

        return true;
    }, [maxSizeMB, allowedTypes]);

    const uploadImage = useCallback(async (file: File): Promise<UploadedImage | null> => {
        if (!validateFile(file)) {
            return null;
        }

        setIsUploading(true);
        setError(null);

        try {
            const formData = new FormData();
            formData.append('file', file);

            const response = await fetch(`/api/upload-image/${projectId}`, {
                method: 'POST',
                body: formData,
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Upload failed');
            }

            const result = await response.json();

            const uploadedImage: UploadedImage = {
                file_path: result.file_path,
                url: result.url,
                file_type: result.file_type,
                size: result.size,
            };

            setUploadedImages(prev => [...prev, uploadedImage]);
            onUploadSuccess?.(uploadedImage);

            return uploadedImage;
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Failed to upload image';
            setError(errorMessage);
            return null;
        } finally {
            setIsUploading(false);
        }
    }, [projectId, validateFile, onUploadSuccess]);

    const resetState = useCallback(() => {
        setUploadedImages([]);
        setError(null);
    }, []);

    return {
        uploadedImages,
        isUploading,
        error,
        uploadImage,
        resetState,
        config: {
            maxSizeMB,
            allowedTypes: allowedTypes as readonly string[],
        },
    };
}

================
File: src/shared/hooks/useLatexCompiler.ts
================
// src/hooks/useLatexEditor.ts
import { useState, useCallback } from 'react';
import { useImageUpload } from './useImageUpload';

interface CompilationResult {
    status: string;
    file_path: string;
    url: string;
    storage_type: 'local' | 'supabase';
}

interface UseLatexEditorProps {
    projectId: string;
}

export function useLatexEditor({ projectId }: UseLatexEditorProps) {
    const [texContent, setTexContent] = useState<string>('');
    const [isCompiling, setIsCompiling] = useState(false);
    const [compiledPdfUrl, setCompiledPdfUrl] = useState<string | null>(null);

    const handleUploadSuccess = useCallback((image: { file_path: string }) => {
        const imageLatex = `\\includegraphics{${image.file_path}}\n`;
        setTexContent(prev => prev + imageLatex);
    }, []);

    const {
        uploadedImages,
        isUploading,
        error: uploadError,
        uploadImage,
    } = useImageUpload({
        projectId,
        onUploadSuccess: handleUploadSuccess,
    });

    const compileLaTeX = useCallback(async (filename: string = 'document.pdf'): Promise<CompilationResult | null> => {
        setIsCompiling(true);

        try {
            const response = await fetch('/api/compile-latex', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    texContent,
                    projectId,
                    filename,
                }),
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || 'Failed to compile LaTeX');
            }

            const result = await response.json();
            setCompiledPdfUrl(result.url);
            return result;
        } catch (err) {
            return null;
        } finally {
            setIsCompiling(false);
        }
    }, [projectId, texContent]);

    const updateTexContent = useCallback((newContent: string) => {
        setTexContent(newContent);
    }, []);

    const resetState = useCallback(() => {
        setTexContent('');
        setCompiledPdfUrl(null);
    }, []);

    return {
        texContent,
        uploadedImages,
        isUploading,
        isCompiling,
        error: uploadError,
        compiledPdfUrl,
        uploadImage,
        compileLaTeX,
        updateTexContent,
        resetState,
    };
}

================
File: src/shared/types/api/index.ts
================
import { TempProfilePOSTSchema } from './temp-profile.type';

export {
    TempProfilePOSTSchema
}

================
File: src/shared/types/api/temp-profile.type.ts
================
import { z } from 'zod'

export const TempProfilePOSTSchema = z.object({
    user_id: z.string().uuid(),
    first_name: z.string(),
    last_name: z.string(),
    username: z.string().max(30),
    email: z.string().email()
})

================
File: src/shared/types/database.types.ts
================
// src/shared/types/database.types.ts

export interface Profile {
    id: string;
    email: string;
    username: string;
    first_name: string;
    last_name: string;
    profile_image?: string;
    created_at: string;
    status: 'active' | 'suspended' | 'deleted';
}

export interface ProjectShare {
    project_id: string;
    user_id: string;
    permission_level: 'read' | 'write' | 'admin';
    shared_at: string;
    shared_by: string;
    user?: Profile;
}

export interface Project {
    id: string;
    name: string;
    status: 'active' | 'archived';
    owner_id: string;
    created_at: string;
    updated_at: string;
    archived_at?: string;
    archived_by?: string;
    archive_reason?: string;
    last_accessed_at: string;
    // Relations
    owner?: Profile;  // Updated to use Profile directly
    shares?: ProjectShare[];
}

================
File: src/shared/types/form.type.ts
================
import { z } from "zod"

export const EmailSignInFormSchema = z.object({
    email: z.string().email(),
    password: z.string()
})

export const EmailSignUpFormSchema = z.object({
    email: z.string().email(),
    password: z.string()
        .min(8, { message: "Password must be at least 8 characters." })
        .max(50, { message: "Password must be between 8 - 50 characters." })
        .regex(
            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/,
            "Password must contain at least one lowercase letter, one uppercase letter, and one number."
        ),
})

export const ProfileSetupFormSchema = z.object({
    first_name: z.string(),
    last_name: z.string(),
    username: z.string().max(30, {
        message: 'Username must be less than 30 characters.'
    })
})

export const EmailAndProfileSignUpSchema = z.intersection(EmailSignUpFormSchema, ProfileSetupFormSchema)

export const PhotoUploadSchema = z.object({
    photo: z.union([
        z.instanceof(File)
            .refine(
                (file) => ['image/jpeg', 'image/png', 'image/webp'].includes(file.type),
                "Only .jpg, .png, and .webp formats are supported."
            )
            .refine(
                (file) => file.size <= 5000000,
                "File size should be less than 5MB."
            ),
        z.undefined()
    ])
})

================
File: src/shared/types/index.ts
================
import { LatexFileType, FileTypeKey, FileCategory } from './latex.type';
import { TableKey } from './table.types';
import { EmailSignInFormSchema, EmailSignUpFormSchema, EmailAndProfileSignUpSchema, ProfileSetupFormSchema, PhotoUploadSchema } from './form.type';

// Typescript types
export type {
    // Latex Types
    LatexFileType,
    FileTypeKey,
    FileCategory,
    // Table Types
    TableKey,
}

// Zod types
export {
    // Form Types
    EmailSignInFormSchema,
    EmailSignUpFormSchema,
    EmailAndProfileSignUpSchema,
    ProfileSetupFormSchema,
    PhotoUploadSchema
}

================
File: src/shared/types/latex.type.ts
================
// Types for LaTeX-related files
export type FileTypeKey = 'tex' | 'cls' | 'sty' | 'bib' | 'bst' | 'dtx' | 'ins';

export type FileCategory = 'main' | 'style' | 'bibliography' | 'packages';

export interface LatexFileType {
    extension: string;
    description: string;
    category: FileCategory;
    template?: string;
}

================
File: src/shared/types/table.types.ts
================
export type TableKey = 'all' | 'self' | 'shared' | 'archived'

================
File: src/shared/utility/supabase/client.ts
================
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
    return createBrowserClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    )
}

================
File: src/shared/utility/supabase/middleware.ts
================
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function updateSession(request: NextRequest) {
    let supabaseResponse = NextResponse.next({
        request,
    })

    const supabase = createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
            cookies: {
                getAll() {
                    return request.cookies.getAll()
                },
                setAll(cookiesToSet) {
                    cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
                    supabaseResponse = NextResponse.next({
                        request,
                    })
                    cookiesToSet.forEach(({ name, value, options }) =>
                        supabaseResponse.cookies.set(name, value, options)
                    )
                },
            },
        }
    )

    // IMPORTANT: Avoid writing any logic between createServerClient and
    // supabase.auth.getUser(). A simple mistake could make it very hard to debug
    // issues with users being randomly logged out.

    const {
        data: { user },
    } = await supabase.auth.getUser()

    if (
        !user &&
        !request.nextUrl.pathname.startsWith('/login') &&
        !request.nextUrl.pathname.startsWith('/auth')
    ) {
        // no user, potentially respond by redirecting the user to the login page
        const url = request.nextUrl.clone()
        url.pathname = '/login'
        return NextResponse.redirect(url)
    }

    // IMPORTANT: You *must* return the supabaseResponse object as it is. If you're
    // creating a new response object with NextResponse.next() make sure to:
    // 1. Pass the request in it, like so:
    //    const myNewResponse = NextResponse.next({ request })
    // 2. Copy over the cookies, like so:
    //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
    // 3. Change the myNewResponse object to fit your needs, but avoid changing
    //    the cookies!
    // 4. Finally:
    //    return myNewResponse
    // If this is not done, you may be causing the browser and server to go out
    // of sync and terminate the user's session prematurely!

    return supabaseResponse
}

================
File: src/shared/utility/supabase/server.ts
================
// src/shared/utility/supabase/server.ts
import { createServerClient, type CookieOptions } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
    const cookieStore = cookies()

    return createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
            cookies: {
                getAll() {
                    return cookieStore.getAll()
                },
                setAll(cookiesToSet) {
                    try {
                        cookiesToSet.forEach(({ name, value, options }) =>
                            cookieStore.set(name, value, options)
                        )
                    } catch {
                        // The `setAll` method was called from a Server Component.
                        // This can be ignored if you have middleware refreshing
                        // user sessions.
                    }
                },
            },
        }
    )
}

================
File: src/shared/utility/styleHelpers.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export const cn = (...inputs: ClassValue[]): string => {
    return twMerge(clsx(inputs))
}

================
File: supabase/migrations/20241203172526_initial_schema.sql
================
create function public.update_updated_at_column() returns trigger
    language plpgsql
    as $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$;

create table public.profile (
    id uuid not null,
    email text not null,
    username text not null,
    first_name text not null,
    last_name text not null,
    profile_image text,
    created_at timestamptz not null default now(),
    status text not null default 'active'::text,
    constraint profile_status_check check (status = any (array['active'::text, 'suspended'::text, 'deleted'::text])),
    constraint profile_username_check check (length(username) < 30)
);

create table public.project (
    id uuid default gen_random_uuid() not null,
    name text not null,
    status text not null,
    owner_id uuid not null,
    created_at timestamptz not null default timezone('utc'::text, now()),
    updated_at timestamptz not null default timezone('utc'::text, now()),
    archived_at timestamptz,
    archived_by uuid,
    archive_reason text,
    last_accessed_at timestamptz not null default timezone('utc'::text, now()),
    constraint project_status_check check (status = any (array['active'::text, 'archived'::text]))
);

create table public.project_shares (
    project_id uuid not null,
    user_id uuid not null,
    permission_level text not null,
    shared_at timestamptz not null default timezone('utc'::text, now()),
    shared_by uuid not null,
    constraint project_shares_permission_level_check check (permission_level = any (array['read'::text, 'write'::text, 'admin'::text]))
);

create table public.temp_profile (
    id bigint not null generated by default as identity,
    created_at timestamptz not null default now(),
    first_name text not null,
    last_name text not null,
    username text not null,
    email text not null,
    user_id uuid default gen_random_uuid() not null,
    constraint temp_profile_email_check check (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text),
    constraint temp_profile_username_check check (length(username) < 30)
);

alter table only public.profile add constraint profile_email_key unique (email);
alter table only public.profile add constraint profile_pkey primary key (id);
alter table only public.profile add constraint profile_username_key unique (username);
alter table only public.project add constraint project_pkey primary key (id);
alter table only public.project_shares add constraint project_shares_pkey primary key (project_id, user_id);
alter table only public.temp_profile add constraint temp_profile_pkey primary key (id);

alter table only public.profile add constraint profile_id_fkey foreign key (id) references auth.users(id) on delete cascade;
alter table only public.project add constraint project_archived_by_fkey foreign key (archived_by) references auth.users(id);
alter table only public.project add constraint project_owner_id_fkey foreign key (owner_id) references auth.users(id);
alter table only public.project_shares add constraint project_shares_project_id_fkey foreign key (project_id) references public.project(id) on delete cascade;
alter table only public.project_shares add constraint project_shares_shared_by_fkey foreign key (shared_by) references auth.users(id);
alter table only public.project_shares add constraint project_shares_user_id_fkey foreign key (user_id) references auth.users(id) on delete cascade;

================
File: supabase/migrations/20241203172558_add_indexes.sql
================
create index profile_email_idx on public.profile using btree (email);
create index profile_username_idx on public.profile using btree (username);
create index project_last_accessed_idx on public.project using btree (last_accessed_at);
create index project_owner_id_idx on public.project using btree (owner_id);
create index project_shares_project_id_idx on public.project_shares using btree (project_id);
create index project_shares_shared_by_idx on public.project_shares using btree (shared_by);
create index project_shares_user_id_idx on public.project_shares using btree (user_id);
create index project_status_idx on public.project using btree (status);
create index temp_profile_user_id_idx on public.temp_profile using btree (user_id);

create trigger update_project_updated_at before update on public.project for each row execute function public.update_updated_at_column();

================
File: supabase/migrations/20241203172617_enable_rls.sql
================
alter table public.profile enable row level security;
alter table public.project enable row level security;
alter table public.project_shares enable row level security;
alter table public.temp_profile enable row level security;

create policy "Only owners can delete projects" on public.project for delete using ((auth.uid() = owner_id));
create policy "Owners can manage project shares" on public.project_shares using ((exists ( select 1 from public.project where ((project.id = project_shares.project_id) and (project.owner_id = auth.uid())))));
create policy "Service role can insert profiles" on public.profile for insert to service_role with check (true);
create policy "Service role has full access to temp profiles" on public.temp_profile to service_role using (true) with check (true);
create policy "Users can create their own projects" on public.project for insert with check ((auth.uid() = owner_id));
create policy "Users can create their temp profile" on public.temp_profile for insert to anon with check (true);
create policy "Users can delete their own profile" on public.profile for delete to authenticated using ((auth.uid() = id));
create policy "Users can update projects they own or have write/admin access t" on public.project for update using ((auth.uid() = owner_id) or (exists ( select 1 from public.project_shares where ((project_shares.project_id = project.id) and (project_shares.user_id = auth.uid()) and (project_shares.permission_level = any (array['write'::text, 'admin'::text]))))));
create policy "Users can update their own profile" on public.profile for update to authenticated using ((auth.uid() = id)) with check ((auth.uid() = id));
create policy "Users can update their temp profile" on public.temp_profile for update to authenticated using (((auth.uid())::text = (user_id)::text)) with check (((auth.uid())::text = (user_id)::text));
create policy "Users can view shares for projects they have access to" on public.project_shares for select using ((exists ( select 1 from public.project where ((project.id = project_shares.project_id) and ((project.owner_id = auth.uid()) or (exists ( select 1 from public.project_shares ps where ((ps.project_id = project_shares.project_id) and (ps.user_id = auth.uid())))))))));
create policy "Users can view their own or shared projects" on public.project for select using ((auth.uid() = owner_id) or (exists ( select 1 from public.project_shares where ((project_shares.project_id = project.id) and (project_shares.user_id = auth.uid())))));
create policy "Users can view their own profile" on public.profile for select to authenticated using ((auth.uid() = id));
create policy "Users can view their temp profile" on public.temp_profile for select to authenticated using (((auth.uid())::text = (user_id)::text));
create policy "Users with admin permission can manage shares" on public.project_shares using ((exists ( select 1 from public.project_shares ps where ((ps.project_id = project_shares.project_id) and (ps.user_id = auth.uid()) and (ps.permission_level = 'admin'::text)))));

================
File: supabase/migrations/20241204195230_update_project_owner_fkey.sql
================
-- First, drop the existing foreign key constraint
ALTER TABLE public.project
DROP CONSTRAINT IF EXISTS project_owner_id_fkey;

-- Add new foreign key constraint to profile table
ALTER TABLE public.project
ADD CONSTRAINT project_owner_id_fkey
FOREIGN KEY (owner_id) REFERENCES public.profile(id)
ON DELETE CASCADE;

-- Update existing indexes if needed
DROP INDEX IF EXISTS project_owner_id_idx;
CREATE INDEX project_owner_id_idx ON public.project(owner_id);

-- Since profile is already linked to auth.users with ON DELETE CASCADE,
-- deleting a user will cascade through profile to projects automatically

================
File: supabase/migrations/20241204195623_update_project_shares_fkey.sql
================
-- Drop existing foreign keys
ALTER TABLE public.project_shares
DROP CONSTRAINT IF EXISTS project_shares_user_id_fkey,
DROP CONSTRAINT IF EXISTS project_shares_shared_by_fkey;

-- Add new foreign keys referencing profile table
ALTER TABLE public.project_shares
ADD CONSTRAINT project_shares_user_id_fkey
FOREIGN KEY (user_id) REFERENCES public.profile(id)
ON DELETE CASCADE;

ALTER TABLE public.project_shares
ADD CONSTRAINT project_shares_shared_by_fkey
FOREIGN KEY (shared_by) REFERENCES public.profile(id);

-- Update indexes to match the new relationships
DROP INDEX IF EXISTS project_shares_user_id_idx;
DROP INDEX IF EXISTS project_shares_shared_by_idx;
CREATE INDEX project_shares_user_id_idx ON public.project_shares(user_id);
CREATE INDEX project_shares_shared_by_idx ON public.project_shares(shared_by);

================
File: supabase/templates/confirmation.html
================
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>Confirm your email</title>
</head>

<body style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;">
    <div style="background-color: #f9f9f9; padding: 20px; border-radius: 5px;">
        <h2 style="color: #333; margin-bottom: 20px;">Confirm your email address</h2>
        <p style="color: #666; line-height: 1.5;">
            Thanks for signing up for CoLabPaper! Please confirm your email address by clicking the button below.
        </p>
        <div style="text-align: center; margin: 30px 0;">
            <a href="{{ .SiteURL }}/api/v1/auth/confirm?token_hash={{ .TokenHash }}&type=email&next={{ .RedirectTo }}"
                style="background-color: #0070f3; color: white; padding: 12px 24px; 
                      text-decoration: none; border-radius: 5px; display: inline-block;">
                Confirm Email Address
            </a>
        </div>
        <p style="color: #666; line-height: 1.5;">
            If you didn't create an account with CoLabPaper, you can safely ignore this email.
        </p>
    </div>
</body>

</html>

================
File: supabase/.gitignore
================
# Supabase
.branches
.temp
.env

================
File: supabase/config.toml
================
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "colabpaper"

[api]
enabled = true
# Port to use for the API URL.
port = 65431
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` is always included.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request. `public` is always included.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
enabled = false

[db]
# Port to use for the local database URL.
port = 65432
# Port used by db diff command to initialize the shadow database.
shadow_port = 65430
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 65439
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory. For example:
# sql_paths = ['./seeds/*.sql', '../project-src/seeds/*-load-testing.sql']
sql_paths = ['./seed.sql']

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 65433
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 65434
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 65435
# pop3_port = 65436

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

[storage.image_transformation]
enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3001"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = [
    "http://127.0.0.1:3001",
    "http://127.0.0.1:3001/auth/callback",
    "http://127.0.0.1:3001/dashboard",
]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = true
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.email.template.confirmation]
subject = "Confirm Your Email"
content_path = "supabase/templates/confirmation.html"


[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = true
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }} ."
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control use of MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = true
verify_enabled = true

# Configure Multi-factor-authentication via Phone Messaging
# [auth.mfa.phone]
# enroll_enabled = true
# verify_enabled = true
# otp_length = 6
# template = "Your code is {{ .Code }} ."
# max_frequency = "10s"

# Configure Multi-factor-authentication via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

[edge_runtime]
enabled = true
# Configure one of the supported request policies: `oneshot`, `per_worker`.
# Use `oneshot` for hot reload, or `per_worker` for load testing.
policy = "oneshot"
inspector_port = 8083

[analytics]
enabled = true
port = 65437
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"

================
File: .env.example
================
# ===================
# Environment (one of: development, staging, production)
# ===================
ENV=development

# ===================
# Latex Service API Configuration
# ===================
# Local: http://localhost:8000
# Dev:   https://api.dev.colabpaper.com
# Prod:  https://api.colabpaper.com
LATEX_SERVICE_URL=http://localhost:8000

# ===================
# Next API Configuration
# ===================
NEXT_PUBLIC_API_VERSION=v1

# ===================
# Supabase Configuration
# ===================
# Local: Your local Supabase instance URL (e.g., http://127.0.0.1:54321)
# Dev:   Your development project URL from Supabase dashboard
# Prod:  Your production project URL from Supabase dashboard
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url

# Local: Your local anon key (can be found in your local instance)
# Dev:   Development project anon key from Supabase dashboard
# Prod:  Production project anon key from Supabase dashboard
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key

# Service role key for admin operations - keep this secret!
# Local: Your local service role key
# Dev:   Development project service role key
# Prod:  Production project service role key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# ===================
# Storage Configuration
# ===================
# Local: "storage"
# Dev:   "supabase"
# Prod:  "supabase"
STORAGE_TYPE=local

# Local storage directory (only used when STORAGE_TYPE=local)
LOCAL_STORAGE_DIR=storage

# PDF bucket name in Supabase storage
PDF_BUCKET_NAME=pdfs

# ===================
# Example Values for Different Environments
# ===================

### Local Development ###
# ENV=development
# LATEX_SERVICE_URL=http://localhost:8000
# NEXT_PUBLIC_SUPABASE_URL=http://127.0.0.1:54321
# NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
# SUPABASE_SERVICE_ROLE_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
# STORAGE_TYPE=local
# LOCAL_STORAGE_DIR=storage
# PDF_BUCKET_NAME=pdfs

### Development Environment ###
# ENV=development
# LATEX_SERVICE_URL=https://api.dev.colabpaper.com
# NEXT_PUBLIC_SUPABASE_URL=https://your-dev-project.supabase.co
# NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
# SUPABASE_SERVICE_ROLE_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
# STORAGE_TYPE=supabase
# PDF_BUCKET_NAME=pdfs-dev

### Production Environment ###
# ENV=production
# LATEX_SERVICE_URL=https://api.colabpaper.com
# NEXT_PUBLIC_SUPABASE_URL=https://your-prod-project.supabase.co
# NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
# SUPABASE_SERVICE_ROLE_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
# STORAGE_TYPE=supabase
# PDF_BUCKET_NAME=pdfs-prod

# ===================
# Optional Features Configuration
# ===================
# Enable image optimization (recommended in production)
OPTIMIZE_IMAGES=false

# Maximum image dimension in pixels
MAX_IMAGE_DIMENSION=2000

# Maximum image size in MB
MAX_IMAGE_SIZE=10

# Maximum compilation time in seconds
MAX_COMPILATION_TIME=300

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "src/components",
    "utils": "@/utils/styleHelpers"
  }
}

================
File: dump.sql
================
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$;


ALTER FUNCTION "public"."update_updated_at_column"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."profile" (
    "id" "uuid" NOT NULL,
    "email" "text" NOT NULL,
    "username" "text" NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "profile_image" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "status" "text" DEFAULT 'active'::"text" NOT NULL,
    CONSTRAINT "profile_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'suspended'::"text", 'deleted'::"text"]))),
    CONSTRAINT "profile_username_check" CHECK (("length"("username") < 30))
);


ALTER TABLE "public"."profile" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."project" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "status" "text" NOT NULL,
    "owner_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "archived_at" timestamp with time zone,
    "archived_by" "uuid",
    "archive_reason" "text",
    "last_accessed_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    CONSTRAINT "project_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'archived'::"text"])))
);


ALTER TABLE "public"."project" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."project_shares" (
    "project_id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "permission_level" "text" NOT NULL,
    "shared_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "shared_by" "uuid" NOT NULL,
    CONSTRAINT "project_shares_permission_level_check" CHECK (("permission_level" = ANY (ARRAY['read'::"text", 'write'::"text", 'admin'::"text"])))
);


ALTER TABLE "public"."project_shares" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."temp_profile" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "username" "text" NOT NULL,
    "email" "text" NOT NULL,
    "user_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    CONSTRAINT "temp_profile_email_check" CHECK (("email" ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::"text")),
    CONSTRAINT "temp_profile_username_check" CHECK (("length"("username") < 30))
);


ALTER TABLE "public"."temp_profile" OWNER TO "postgres";


ALTER TABLE "public"."temp_profile" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."temp_profile_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_username_key" UNIQUE ("username");



ALTER TABLE ONLY "public"."project"
    ADD CONSTRAINT "project_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."project_shares"
    ADD CONSTRAINT "project_shares_pkey" PRIMARY KEY ("project_id", "user_id");



ALTER TABLE ONLY "public"."temp_profile"
    ADD CONSTRAINT "temp_profile_pkey" PRIMARY KEY ("id");



CREATE INDEX "profile_email_idx" ON "public"."profile" USING "btree" ("email");



CREATE INDEX "profile_username_idx" ON "public"."profile" USING "btree" ("username");



CREATE INDEX "project_last_accessed_idx" ON "public"."project" USING "btree" ("last_accessed_at");



CREATE INDEX "project_owner_id_idx" ON "public"."project" USING "btree" ("owner_id");



CREATE INDEX "project_shares_project_id_idx" ON "public"."project_shares" USING "btree" ("project_id");



CREATE INDEX "project_shares_shared_by_idx" ON "public"."project_shares" USING "btree" ("shared_by");



CREATE INDEX "project_shares_user_id_idx" ON "public"."project_shares" USING "btree" ("user_id");



CREATE INDEX "project_status_idx" ON "public"."project" USING "btree" ("status");



CREATE INDEX "temp_profile_user_id_idx" ON "public"."temp_profile" USING "btree" ("user_id");



CREATE OR REPLACE TRIGGER "update_project_updated_at" BEFORE UPDATE ON "public"."project" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."project"
    ADD CONSTRAINT "project_archived_by_fkey" FOREIGN KEY ("archived_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."project"
    ADD CONSTRAINT "project_owner_id_fkey" FOREIGN KEY ("owner_id") REFERENCES "public"."profile"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."project_shares"
    ADD CONSTRAINT "project_shares_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."project"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."project_shares"
    ADD CONSTRAINT "project_shares_shared_by_fkey" FOREIGN KEY ("shared_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."project_shares"
    ADD CONSTRAINT "project_shares_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Anyone can create temp_profile" ON "public"."temp_profile" FOR INSERT WITH CHECK (true);



CREATE POLICY "Service role can insert profiles" ON "public"."profile" FOR INSERT TO "service_role" WITH CHECK (true);



CREATE POLICY "Service role has full access to temp profiles" ON "public"."temp_profile" TO "service_role" USING (true) WITH CHECK (true);



CREATE POLICY "Service role has full access to temp_profile" ON "public"."temp_profile" TO "service_role" USING (true) WITH CHECK (true);



CREATE POLICY "Users can create their temp profile" ON "public"."temp_profile" FOR INSERT TO "anon" WITH CHECK (true);



CREATE POLICY "Users can delete their own profile" ON "public"."profile" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "id"));



CREATE POLICY "Users can read their temp_profile" ON "public"."temp_profile" FOR SELECT USING ((("auth"."uid"())::"text" = ("user_id")::"text"));



CREATE POLICY "Users can update their own profile" ON "public"."profile" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Users can update their temp profile" ON "public"."temp_profile" FOR UPDATE TO "authenticated" USING ((("auth"."uid"())::"text" = ("user_id")::"text")) WITH CHECK ((("auth"."uid"())::"text" = ("user_id")::"text"));



CREATE POLICY "Users can update their temp_profile" ON "public"."temp_profile" FOR UPDATE USING ((("auth"."uid"())::"text" = ("user_id")::"text")) WITH CHECK ((("auth"."uid"())::"text" = ("user_id")::"text"));



CREATE POLICY "Users can view their own profile" ON "public"."profile" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "id"));



CREATE POLICY "Users can view their temp profile" ON "public"."temp_profile" FOR SELECT TO "authenticated" USING ((("auth"."uid"())::"text" = ("user_id")::"text"));



CREATE POLICY "create_project_policy" ON "public"."project" FOR INSERT WITH CHECK (("auth"."uid"() = "owner_id"));



CREATE POLICY "create_share_policy" ON "public"."project_shares" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."project"
  WHERE (("project"."id" = "project_shares"."project_id") AND (("project"."owner_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
           FROM "public"."project_shares" "project_shares_1"
          WHERE (("project_shares_1"."project_id" = "project"."id") AND ("project_shares_1"."user_id" = "auth"."uid"()) AND ("project_shares_1"."permission_level" = 'admin'::"text")))))))));



CREATE POLICY "delete_project_policy" ON "public"."project" FOR DELETE USING (("auth"."uid"() = "owner_id"));



CREATE POLICY "delete_share_policy" ON "public"."project_shares" FOR DELETE USING ((EXISTS ( SELECT 1
   FROM "public"."project"
  WHERE (("project"."id" = "project_shares"."project_id") AND ("project"."owner_id" = "auth"."uid"())))));



ALTER TABLE "public"."profile" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."project" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "project_insert" ON "public"."project" FOR INSERT WITH CHECK (("auth"."uid"() = "owner_id"));



CREATE POLICY "project_select" ON "public"."project" FOR SELECT USING (("auth"."uid"() = "owner_id"));



ALTER TABLE "public"."temp_profile" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "update_project_policy" ON "public"."project" FOR UPDATE USING ((("auth"."uid"() = "owner_id") OR (EXISTS ( SELECT 1
   FROM "public"."project_shares"
  WHERE (("project_shares"."project_id" = "project"."id") AND ("project_shares"."user_id" = "auth"."uid"()) AND ("project_shares"."permission_level" = ANY (ARRAY['write'::"text", 'admin'::"text"])))))));



CREATE POLICY "update_share_policy" ON "public"."project_shares" FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM "public"."project"
  WHERE (("project"."id" = "project_shares"."project_id") AND ("project"."owner_id" = "auth"."uid"())))));



CREATE POLICY "view_project_policy" ON "public"."project" FOR SELECT USING ((("auth"."uid"() = "owner_id") OR (EXISTS ( SELECT 1
   FROM "public"."project_shares"
  WHERE (("project_shares"."project_id" = "project"."id") AND ("project_shares"."user_id" = "auth"."uid"()))))));



CREATE POLICY "view_shares_policy" ON "public"."project_shares" FOR SELECT USING ((("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."project"
  WHERE (("project"."id" = "project_shares"."project_id") AND ("project"."owner_id" = "auth"."uid"()))))));





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";





GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


























































































































































































GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "service_role";


















GRANT ALL ON TABLE "public"."profile" TO "anon";
GRANT ALL ON TABLE "public"."profile" TO "authenticated";
GRANT ALL ON TABLE "public"."profile" TO "service_role";



GRANT ALL ON TABLE "public"."project" TO "anon";
GRANT ALL ON TABLE "public"."project" TO "authenticated";
GRANT ALL ON TABLE "public"."project" TO "service_role";



GRANT ALL ON TABLE "public"."project_shares" TO "anon";
GRANT ALL ON TABLE "public"."project_shares" TO "authenticated";
GRANT ALL ON TABLE "public"."project_shares" TO "service_role";



GRANT ALL ON TABLE "public"."temp_profile" TO "anon";
GRANT ALL ON TABLE "public"."temp_profile" TO "authenticated";
GRANT ALL ON TABLE "public"."temp_profile" TO "service_role";



GRANT ALL ON SEQUENCE "public"."temp_profile_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."temp_profile_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."temp_profile_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;

================
File: middleware.ts
================
import { type NextRequest } from 'next/server'
import { NextResponse } from 'next/server'
import { createServerClient, type CookieOptions } from '@supabase/ssr'

// Define public routes that don't require authentication
const publicRoutes = [
    '/',              // Splash page
    '/signin',        // Sign in page
    '/signup',        // Sign up page
]

export async function middleware(request: NextRequest) {
    const { pathname } = request.nextUrl

    // Check if the route is public
    if (publicRoutes.includes(pathname)) {
        // If it's a public route, create a response and a supabase client to check auth status
        let response = NextResponse.next({
            request: {
                headers: request.headers,
            },
        })

        const supabase = createServerClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL!,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
            {
                cookies: {
                    getAll() {
                        return request.cookies.getAll()
                    },
                    setAll(cookiesToSet) {
                        cookiesToSet.forEach(({ name, value, options }) => {
                            request.cookies.set({ name, value, ...options })
                        })
                        response = NextResponse.next({
                            request: {
                                headers: request.headers,
                            },
                        })
                        cookiesToSet.forEach(({ name, value, options }) => {
                            response.cookies.set({ name, value, ...options })
                        })
                    },
                },
            }
        )

        // Check if user is authenticated
        const { data: { user } } = await supabase.auth.getUser()

        // If user is authenticated and trying to access auth pages, redirect to dashboard
        if (user && (pathname === '/signin' || pathname === '/signup')) {
            return NextResponse.redirect(new URL('/dashboard', request.url))
        }

        return response
    }

    // For protected routes, check authentication
    let response = NextResponse.next({
        request: {
            headers: request.headers,
        },
    })

    const supabase = createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
            cookies: {
                get(name: string) {
                    return request.cookies.get(name)?.value
                },
                set(name: string, value: string, options: CookieOptions) {
                    request.cookies.set({
                        name,
                        value,
                        ...options,
                    })
                    response = NextResponse.next({
                        request: {
                            headers: request.headers,
                        },
                    })
                    response.cookies.set({
                        name,
                        value,
                        ...options,
                    })
                },
                remove(name: string, options: CookieOptions) {
                    request.cookies.set({
                        name,
                        value: '',
                        ...options,
                    })
                    response = NextResponse.next({
                        request: {
                            headers: request.headers,
                        },
                    })
                    response.cookies.set({
                        name,
                        value: '',
                        ...options,
                    })
                },
            },
        }
    )

    const { data: { user } } = await supabase.auth.getUser()

    // If no user and trying to access protected route, redirect to splash page
    if (!user) {
        return NextResponse.redirect(new URL('/', request.url))
    }

    return response
}

export const config = {
    matcher: [
        /*
         * Match all request paths except for the ones starting with:
         * - api (API routes)
         * - _next/static (static files)
         * - _next/image (image optimization files)
         * - favicon.ico (favicon file)
         * - public folder
         * - auth/callback (auth callback route)
         */
        '/((?!api|_next/static|_next/image|favicon.ico|public|auth/confirm|.*\\.(png|jpg|jpeg|gif|webp)$).*)',
    ],
}

================
File: next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {}

module.exports = nextConfig

================
File: package.json
================
{
  "name": "colabpaper",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "prettier": "prettier --write ."
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@supabase/ssr": "^0.5.2",
    "@supabase/supabase-js": "^2.46.1",
    "@tailwindcss/typography": "^0.5.10",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.302.0",
    "monaco-editor": "^0.50.0",
    "next": "14.0.1",
    "next-auth": "^4.24.5",
    "next-themes": "^0.4.3",
    "react": "^18",
    "react-dom": "^18",
    "react-hook-form": "^7.53.2",
    "react-monaco-editor": "^0.56.1",
    "react-pdf": "^9.1.0",
    "react-resizable-panels": "^2.0.23",
    "server-only": "^0.0.1",
    "shadcn-ui": "^0.5.0",
    "tailwind-merge": "^2.4.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.0.1",
    "postcss": "^8",
    "prettier": "^3.0.3",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class", "[data-theme='dark']"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/tailwindconfig": [
        "./tailwind.config.ts"
      ],
      "@/app/*": [
        "./src/app/*"
      ],
      "@/components/*": [
        "./src/components/*"
      ],
      "@/utils/*": [
        "./src/shared/utility/*"
      ],
      "@/atoms": [
        "./src/shared/atoms.ts"
      ],
      "@/context/*": [
        "./src/shared/context/*"
      ],
      "@/constants/*": [
        "./src/shared/constants/*"
      ],
      "@/constants": [
        "./src/shared/constants/index.ts"
      ],
      "@/hooks/*": [
        "./src/shared/hooks/*"
      ],
      "@/types": [
        "./src/shared/types/index.ts"
      ],
      "@/types/*": [
        "./src/shared/types/*"
      ],
      "@/actions/*": [
        "./src/shared/actions/*"
      ],
      "@/config/*": [
        "./src/config/*"
      ],
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

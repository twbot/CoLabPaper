

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$;


ALTER FUNCTION "public"."update_updated_at_column"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."profile" (
    "id" "uuid" NOT NULL,
    "email" "text" NOT NULL,
    "username" "text" NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "profile_image" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "status" "text" DEFAULT 'active'::"text" NOT NULL,
    CONSTRAINT "profile_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'suspended'::"text", 'deleted'::"text"]))),
    CONSTRAINT "profile_username_check" CHECK (("length"("username") < 30))
);


ALTER TABLE "public"."profile" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."project" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "status" "text" NOT NULL,
    "owner_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "archived_at" timestamp with time zone,
    "archived_by" "uuid",
    "archive_reason" "text",
    "last_accessed_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    CONSTRAINT "project_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'archived'::"text"])))
);


ALTER TABLE "public"."project" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."project_shares" (
    "project_id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "permission_level" "text" NOT NULL,
    "shared_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "shared_by" "uuid" NOT NULL,
    CONSTRAINT "project_shares_permission_level_check" CHECK (("permission_level" = ANY (ARRAY['read'::"text", 'write'::"text", 'admin'::"text"])))
);


ALTER TABLE "public"."project_shares" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."temp_profile" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "username" "text" NOT NULL,
    "email" "text" NOT NULL,
    "user_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    CONSTRAINT "temp_profile_email_check" CHECK (("email" ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::"text")),
    CONSTRAINT "temp_profile_username_check" CHECK (("length"("username") < 30))
);


ALTER TABLE "public"."temp_profile" OWNER TO "postgres";


ALTER TABLE "public"."temp_profile" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."temp_profile_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_username_key" UNIQUE ("username");



ALTER TABLE ONLY "public"."project"
    ADD CONSTRAINT "project_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."project_shares"
    ADD CONSTRAINT "project_shares_pkey" PRIMARY KEY ("project_id", "user_id");



ALTER TABLE ONLY "public"."temp_profile"
    ADD CONSTRAINT "temp_profile_pkey" PRIMARY KEY ("id");



CREATE INDEX "profile_email_idx" ON "public"."profile" USING "btree" ("email");



CREATE INDEX "profile_username_idx" ON "public"."profile" USING "btree" ("username");



CREATE INDEX "project_last_accessed_idx" ON "public"."project" USING "btree" ("last_accessed_at");



CREATE INDEX "project_owner_id_idx" ON "public"."project" USING "btree" ("owner_id");



CREATE INDEX "project_shares_project_id_idx" ON "public"."project_shares" USING "btree" ("project_id");



CREATE INDEX "project_shares_shared_by_idx" ON "public"."project_shares" USING "btree" ("shared_by");



CREATE INDEX "project_shares_user_id_idx" ON "public"."project_shares" USING "btree" ("user_id");



CREATE INDEX "project_status_idx" ON "public"."project" USING "btree" ("status");



CREATE INDEX "temp_profile_user_id_idx" ON "public"."temp_profile" USING "btree" ("user_id");



CREATE OR REPLACE TRIGGER "update_project_updated_at" BEFORE UPDATE ON "public"."project" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."project"
    ADD CONSTRAINT "project_archived_by_fkey" FOREIGN KEY ("archived_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."project"
    ADD CONSTRAINT "project_owner_id_fkey" FOREIGN KEY ("owner_id") REFERENCES "public"."profile"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."project_shares"
    ADD CONSTRAINT "project_shares_project_id_fkey" FOREIGN KEY ("project_id") REFERENCES "public"."project"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."project_shares"
    ADD CONSTRAINT "project_shares_shared_by_fkey" FOREIGN KEY ("shared_by") REFERENCES "public"."profile"("id");



ALTER TABLE ONLY "public"."project_shares"
    ADD CONSTRAINT "project_shares_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profile"("id") ON DELETE CASCADE;



CREATE POLICY "Anyone can create temp_profile" ON "public"."temp_profile" FOR INSERT WITH CHECK (true);



CREATE POLICY "Service role can insert profiles" ON "public"."profile" FOR INSERT TO "service_role" WITH CHECK (true);



CREATE POLICY "Service role has full access to temp profiles" ON "public"."temp_profile" TO "service_role" USING (true) WITH CHECK (true);



CREATE POLICY "Service role has full access to temp_profile" ON "public"."temp_profile" TO "service_role" USING (true) WITH CHECK (true);



CREATE POLICY "Users can create their temp profile" ON "public"."temp_profile" FOR INSERT TO "anon" WITH CHECK (true);



CREATE POLICY "Users can delete their own profile" ON "public"."profile" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "id"));



CREATE POLICY "Users can read their temp_profile" ON "public"."temp_profile" FOR SELECT USING ((("auth"."uid"())::"text" = ("user_id")::"text"));



CREATE POLICY "Users can update their own profile" ON "public"."profile" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Users can update their temp profile" ON "public"."temp_profile" FOR UPDATE TO "authenticated" USING ((("auth"."uid"())::"text" = ("user_id")::"text")) WITH CHECK ((("auth"."uid"())::"text" = ("user_id")::"text"));



CREATE POLICY "Users can update their temp_profile" ON "public"."temp_profile" FOR UPDATE USING ((("auth"."uid"())::"text" = ("user_id")::"text")) WITH CHECK ((("auth"."uid"())::"text" = ("user_id")::"text"));



CREATE POLICY "Users can view their own profile" ON "public"."profile" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "id"));



CREATE POLICY "Users can view their temp profile" ON "public"."temp_profile" FOR SELECT TO "authenticated" USING ((("auth"."uid"())::"text" = ("user_id")::"text"));



CREATE POLICY "create_project_policy" ON "public"."project" FOR INSERT WITH CHECK (("auth"."uid"() = "owner_id"));



CREATE POLICY "create_share_policy" ON "public"."project_shares" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."project"
  WHERE (("project"."id" = "project_shares"."project_id") AND (("project"."owner_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
           FROM "public"."project_shares" "project_shares_1"
          WHERE (("project_shares_1"."project_id" = "project"."id") AND ("project_shares_1"."user_id" = "auth"."uid"()) AND ("project_shares_1"."permission_level" = 'admin'::"text")))))))));



CREATE POLICY "delete_project_policy" ON "public"."project" FOR DELETE USING (("auth"."uid"() = "owner_id"));



CREATE POLICY "delete_share_policy" ON "public"."project_shares" FOR DELETE USING ((EXISTS ( SELECT 1
   FROM "public"."project"
  WHERE (("project"."id" = "project_shares"."project_id") AND ("project"."owner_id" = "auth"."uid"())))));



ALTER TABLE "public"."profile" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."project" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "project_insert" ON "public"."project" FOR INSERT WITH CHECK (("auth"."uid"() = "owner_id"));



CREATE POLICY "project_select" ON "public"."project" FOR SELECT USING (("auth"."uid"() = "owner_id"));



ALTER TABLE "public"."temp_profile" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "update_project_policy" ON "public"."project" FOR UPDATE USING ((("auth"."uid"() = "owner_id") OR (EXISTS ( SELECT 1
   FROM "public"."project_shares"
  WHERE (("project_shares"."project_id" = "project"."id") AND ("project_shares"."user_id" = "auth"."uid"()) AND ("project_shares"."permission_level" = ANY (ARRAY['write'::"text", 'admin'::"text"])))))));



CREATE POLICY "update_share_policy" ON "public"."project_shares" FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM "public"."project"
  WHERE (("project"."id" = "project_shares"."project_id") AND ("project"."owner_id" = "auth"."uid"())))));



CREATE POLICY "view_project_policy" ON "public"."project" FOR SELECT USING ((("auth"."uid"() = "owner_id") OR (EXISTS ( SELECT 1
   FROM "public"."project_shares"
  WHERE (("project_shares"."project_id" = "project"."id") AND ("project_shares"."user_id" = "auth"."uid"()))))));



CREATE POLICY "view_shares_policy" ON "public"."project_shares" FOR SELECT USING ((("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."project"
  WHERE (("project"."id" = "project_shares"."project_id") AND ("project"."owner_id" = "auth"."uid"()))))));





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";





GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


























































































































































































GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "service_role";


















GRANT ALL ON TABLE "public"."profile" TO "anon";
GRANT ALL ON TABLE "public"."profile" TO "authenticated";
GRANT ALL ON TABLE "public"."profile" TO "service_role";



GRANT ALL ON TABLE "public"."project" TO "anon";
GRANT ALL ON TABLE "public"."project" TO "authenticated";
GRANT ALL ON TABLE "public"."project" TO "service_role";



GRANT ALL ON TABLE "public"."project_shares" TO "anon";
GRANT ALL ON TABLE "public"."project_shares" TO "authenticated";
GRANT ALL ON TABLE "public"."project_shares" TO "service_role";



GRANT ALL ON TABLE "public"."temp_profile" TO "anon";
GRANT ALL ON TABLE "public"."temp_profile" TO "authenticated";
GRANT ALL ON TABLE "public"."temp_profile" TO "service_role";



GRANT ALL ON SEQUENCE "public"."temp_profile_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."temp_profile_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."temp_profile_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
